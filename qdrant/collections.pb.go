// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.12.4
// source: collections.proto

package go_client

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Distance int32

const (
	Distance_UnknownDistance Distance = 0
	Distance_Cosine          Distance = 1
	Distance_Euclid          Distance = 2
	Distance_Dot             Distance = 3
)

// Enum value maps for Distance.
var (
	Distance_name = map[int32]string{
		0: "UnknownDistance",
		1: "Cosine",
		2: "Euclid",
		3: "Dot",
	}
	Distance_value = map[string]int32{
		"UnknownDistance": 0,
		"Cosine":          1,
		"Euclid":          2,
		"Dot":             3,
	}
)

func (x Distance) Enum() *Distance {
	p := new(Distance)
	*p = x
	return p
}

func (x Distance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Distance) Descriptor() protoreflect.EnumDescriptor {
	return file_collections_proto_enumTypes[0].Descriptor()
}

func (Distance) Type() protoreflect.EnumType {
	return &file_collections_proto_enumTypes[0]
}

func (x Distance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Distance.Descriptor instead.
func (Distance) EnumDescriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{0}
}

type CollectionStatus int32

const (
	CollectionStatus_UnknownCollectionStatus CollectionStatus = 0
	CollectionStatus_Green                   CollectionStatus = 1 // All segments are ready
	CollectionStatus_Yellow                  CollectionStatus = 2 // Optimization in process
	CollectionStatus_Red                     CollectionStatus = 3 // Something went wrong
)

// Enum value maps for CollectionStatus.
var (
	CollectionStatus_name = map[int32]string{
		0: "UnknownCollectionStatus",
		1: "Green",
		2: "Yellow",
		3: "Red",
	}
	CollectionStatus_value = map[string]int32{
		"UnknownCollectionStatus": 0,
		"Green":                   1,
		"Yellow":                  2,
		"Red":                     3,
	}
)

func (x CollectionStatus) Enum() *CollectionStatus {
	p := new(CollectionStatus)
	*p = x
	return p
}

func (x CollectionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CollectionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_collections_proto_enumTypes[1].Descriptor()
}

func (CollectionStatus) Type() protoreflect.EnumType {
	return &file_collections_proto_enumTypes[1]
}

func (x CollectionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CollectionStatus.Descriptor instead.
func (CollectionStatus) EnumDescriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{1}
}

type PayloadSchemaType int32

const (
	PayloadSchemaType_UnknownType PayloadSchemaType = 0
	PayloadSchemaType_Keyword     PayloadSchemaType = 1
	PayloadSchemaType_Integer     PayloadSchemaType = 2
	PayloadSchemaType_Float       PayloadSchemaType = 3
	PayloadSchemaType_Geo         PayloadSchemaType = 4
	PayloadSchemaType_Text        PayloadSchemaType = 5
)

// Enum value maps for PayloadSchemaType.
var (
	PayloadSchemaType_name = map[int32]string{
		0: "UnknownType",
		1: "Keyword",
		2: "Integer",
		3: "Float",
		4: "Geo",
		5: "Text",
	}
	PayloadSchemaType_value = map[string]int32{
		"UnknownType": 0,
		"Keyword":     1,
		"Integer":     2,
		"Float":       3,
		"Geo":         4,
		"Text":        5,
	}
)

func (x PayloadSchemaType) Enum() *PayloadSchemaType {
	p := new(PayloadSchemaType)
	*p = x
	return p
}

func (x PayloadSchemaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayloadSchemaType) Descriptor() protoreflect.EnumDescriptor {
	return file_collections_proto_enumTypes[2].Descriptor()
}

func (PayloadSchemaType) Type() protoreflect.EnumType {
	return &file_collections_proto_enumTypes[2]
}

func (x PayloadSchemaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayloadSchemaType.Descriptor instead.
func (PayloadSchemaType) EnumDescriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{2}
}

type TokenizerType int32

const (
	TokenizerType_Unknown    TokenizerType = 0
	TokenizerType_Prefix     TokenizerType = 1
	TokenizerType_Whitespace TokenizerType = 2
	TokenizerType_Word       TokenizerType = 3
)

// Enum value maps for TokenizerType.
var (
	TokenizerType_name = map[int32]string{
		0: "Unknown",
		1: "Prefix",
		2: "Whitespace",
		3: "Word",
	}
	TokenizerType_value = map[string]int32{
		"Unknown":    0,
		"Prefix":     1,
		"Whitespace": 2,
		"Word":       3,
	}
)

func (x TokenizerType) Enum() *TokenizerType {
	p := new(TokenizerType)
	*p = x
	return p
}

func (x TokenizerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenizerType) Descriptor() protoreflect.EnumDescriptor {
	return file_collections_proto_enumTypes[3].Descriptor()
}

func (TokenizerType) Type() protoreflect.EnumType {
	return &file_collections_proto_enumTypes[3]
}

func (x TokenizerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenizerType.Descriptor instead.
func (TokenizerType) EnumDescriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{3}
}

type VectorParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size     uint64   `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`                              // Size of the vectors
	Distance Distance `protobuf:"varint,2,opt,name=distance,proto3,enum=qdrant.Distance" json:"distance,omitempty"` // Distance function used for comparing vectors
}

func (x *VectorParams) Reset() {
	*x = VectorParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collections_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorParams) ProtoMessage() {}

func (x *VectorParams) ProtoReflect() protoreflect.Message {
	mi := &file_collections_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorParams.ProtoReflect.Descriptor instead.
func (*VectorParams) Descriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{0}
}

func (x *VectorParams) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *VectorParams) GetDistance() Distance {
	if x != nil {
		return x.Distance
	}
	return Distance_UnknownDistance
}

type VectorParamsMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Map map[string]*VectorParams `protobuf:"bytes,1,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VectorParamsMap) Reset() {
	*x = VectorParamsMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collections_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorParamsMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorParamsMap) ProtoMessage() {}

func (x *VectorParamsMap) ProtoReflect() protoreflect.Message {
	mi := &file_collections_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorParamsMap.ProtoReflect.Descriptor instead.
func (*VectorParamsMap) Descriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{1}
}

func (x *VectorParamsMap) GetMap() map[string]*VectorParams {
	if x != nil {
		return x.Map
	}
	return nil
}

type VectorsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Config:
	//	*VectorsConfig_Params
	//	*VectorsConfig_ParamsMap
	Config isVectorsConfig_Config `protobuf_oneof:"config"`
}

func (x *VectorsConfig) Reset() {
	*x = VectorsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collections_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorsConfig) ProtoMessage() {}

func (x *VectorsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_collections_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorsConfig.ProtoReflect.Descriptor instead.
func (*VectorsConfig) Descriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{2}
}

func (m *VectorsConfig) GetConfig() isVectorsConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *VectorsConfig) GetParams() *VectorParams {
	if x, ok := x.GetConfig().(*VectorsConfig_Params); ok {
		return x.Params
	}
	return nil
}

func (x *VectorsConfig) GetParamsMap() *VectorParamsMap {
	if x, ok := x.GetConfig().(*VectorsConfig_ParamsMap); ok {
		return x.ParamsMap
	}
	return nil
}

type isVectorsConfig_Config interface {
	isVectorsConfig_Config()
}

type VectorsConfig_Params struct {
	Params *VectorParams `protobuf:"bytes,1,opt,name=params,proto3,oneof"`
}

type VectorsConfig_ParamsMap struct {
	ParamsMap *VectorParamsMap `protobuf:"bytes,2,opt,name=params_map,json=paramsMap,proto3,oneof"`
}

func (*VectorsConfig_Params) isVectorsConfig_Config() {}

func (*VectorsConfig_ParamsMap) isVectorsConfig_Config() {}

type GetCollectionInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"` // Name of the collection
}

func (x *GetCollectionInfoRequest) Reset() {
	*x = GetCollectionInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collections_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectionInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectionInfoRequest) ProtoMessage() {}

func (x *GetCollectionInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_collections_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectionInfoRequest.ProtoReflect.Descriptor instead.
func (*GetCollectionInfoRequest) Descriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{3}
}

func (x *GetCollectionInfoRequest) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

type ListCollectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListCollectionsRequest) Reset() {
	*x = ListCollectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collections_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCollectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCollectionsRequest) ProtoMessage() {}

func (x *ListCollectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_collections_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCollectionsRequest.ProtoReflect.Descriptor instead.
func (*ListCollectionsRequest) Descriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{4}
}

type CollectionDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Name of the collection
}

func (x *CollectionDescription) Reset() {
	*x = CollectionDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collections_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionDescription) ProtoMessage() {}

func (x *CollectionDescription) ProtoReflect() protoreflect.Message {
	mi := &file_collections_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionDescription.ProtoReflect.Descriptor instead.
func (*CollectionDescription) Descriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{5}
}

func (x *CollectionDescription) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetCollectionInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CollectionInfo `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Time   float64         `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
}

func (x *GetCollectionInfoResponse) Reset() {
	*x = GetCollectionInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collections_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectionInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectionInfoResponse) ProtoMessage() {}

func (x *GetCollectionInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_collections_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectionInfoResponse.ProtoReflect.Descriptor instead.
func (*GetCollectionInfoResponse) Descriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{6}
}

func (x *GetCollectionInfoResponse) GetResult() *CollectionInfo {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *GetCollectionInfoResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type ListCollectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collections []*CollectionDescription `protobuf:"bytes,1,rep,name=collections,proto3" json:"collections,omitempty"`
	Time        float64                  `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
}

func (x *ListCollectionsResponse) Reset() {
	*x = ListCollectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collections_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCollectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCollectionsResponse) ProtoMessage() {}

func (x *ListCollectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_collections_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCollectionsResponse.ProtoReflect.Descriptor instead.
func (*ListCollectionsResponse) Descriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{7}
}

func (x *ListCollectionsResponse) GetCollections() []*CollectionDescription {
	if x != nil {
		return x.Collections
	}
	return nil
}

func (x *ListCollectionsResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type OptimizerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok    bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *OptimizerStatus) Reset() {
	*x = OptimizerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collections_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptimizerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptimizerStatus) ProtoMessage() {}

func (x *OptimizerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_collections_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptimizerStatus.ProtoReflect.Descriptor instead.
func (*OptimizerStatus) Descriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{8}
}

func (x *OptimizerStatus) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *OptimizerStatus) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type HnswConfigDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//Number of edges per node in the index graph. Larger the value - more accurate the search, more space required.
	M *uint64 `protobuf:"varint,1,opt,name=m,proto3,oneof" json:"m,omitempty"`
	//
	//Number of neighbours to consider during the index building. Larger the value - more accurate the search, more time required to build index.
	EfConstruct *uint64 `protobuf:"varint,2,opt,name=ef_construct,json=efConstruct,proto3,oneof" json:"ef_construct,omitempty"`
	//
	//Minimal size (in KiloBytes) of vectors for additional payload-based indexing.
	//If payload chunk is smaller than `full_scan_threshold` additional indexing won't be used -
	//in this case full-scan search should be preferred by query planner and additional indexing is not required.
	//Note: 1Kb = 1 vector of size 256
	FullScanThreshold *uint64 `protobuf:"varint,3,opt,name=full_scan_threshold,json=fullScanThreshold,proto3,oneof" json:"full_scan_threshold,omitempty"`
	//
	//Number of parallel threads used for background index building. If 0 - auto selection.
	MaxIndexingThreads *uint64 `protobuf:"varint,4,opt,name=max_indexing_threads,json=maxIndexingThreads,proto3,oneof" json:"max_indexing_threads,omitempty"`
}

func (x *HnswConfigDiff) Reset() {
	*x = HnswConfigDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collections_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HnswConfigDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnswConfigDiff) ProtoMessage() {}

func (x *HnswConfigDiff) ProtoReflect() protoreflect.Message {
	mi := &file_collections_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnswConfigDiff.ProtoReflect.Descriptor instead.
func (*HnswConfigDiff) Descriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{9}
}

func (x *HnswConfigDiff) GetM() uint64 {
	if x != nil && x.M != nil {
		return *x.M
	}
	return 0
}

func (x *HnswConfigDiff) GetEfConstruct() uint64 {
	if x != nil && x.EfConstruct != nil {
		return *x.EfConstruct
	}
	return 0
}

func (x *HnswConfigDiff) GetFullScanThreshold() uint64 {
	if x != nil && x.FullScanThreshold != nil {
		return *x.FullScanThreshold
	}
	return 0
}

func (x *HnswConfigDiff) GetMaxIndexingThreads() uint64 {
	if x != nil && x.MaxIndexingThreads != nil {
		return *x.MaxIndexingThreads
	}
	return 0
}

type WalConfigDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalCapacityMb    *uint64 `protobuf:"varint,1,opt,name=wal_capacity_mb,json=walCapacityMb,proto3,oneof" json:"wal_capacity_mb,omitempty"`          // Size of a single WAL block file
	WalSegmentsAhead *uint64 `protobuf:"varint,2,opt,name=wal_segments_ahead,json=walSegmentsAhead,proto3,oneof" json:"wal_segments_ahead,omitempty"` // Number of segments to create in advance
}

func (x *WalConfigDiff) Reset() {
	*x = WalConfigDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collections_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalConfigDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalConfigDiff) ProtoMessage() {}

func (x *WalConfigDiff) ProtoReflect() protoreflect.Message {
	mi := &file_collections_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalConfigDiff.ProtoReflect.Descriptor instead.
func (*WalConfigDiff) Descriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{10}
}

func (x *WalConfigDiff) GetWalCapacityMb() uint64 {
	if x != nil && x.WalCapacityMb != nil {
		return *x.WalCapacityMb
	}
	return 0
}

func (x *WalConfigDiff) GetWalSegmentsAhead() uint64 {
	if x != nil && x.WalSegmentsAhead != nil {
		return *x.WalSegmentsAhead
	}
	return 0
}

type OptimizersConfigDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The minimal fraction of deleted vectors in a segment, required to perform segment optimization
	DeletedThreshold *float64 `protobuf:"fixed64,1,opt,name=deleted_threshold,json=deletedThreshold,proto3,oneof" json:"deleted_threshold,omitempty"`
	//
	//The minimal number of vectors in a segment, required to perform segment optimization
	VacuumMinVectorNumber *uint64 `protobuf:"varint,2,opt,name=vacuum_min_vector_number,json=vacuumMinVectorNumber,proto3,oneof" json:"vacuum_min_vector_number,omitempty"`
	//
	//Target amount of segments optimizer will try to keep.
	//Real amount of segments may vary depending on multiple parameters:
	//
	//- Amount of stored points.
	//- Current write RPS.
	//
	//It is recommended to select default number of segments as a factor of the number of search threads,
	//so that each segment would be handled evenly by one of the threads.
	DefaultSegmentNumber *uint64 `protobuf:"varint,3,opt,name=default_segment_number,json=defaultSegmentNumber,proto3,oneof" json:"default_segment_number,omitempty"`
	//
	//Do not create segments larger this size (in KiloBytes).
	//Large segments might require disproportionately long indexation times,
	//therefore it makes sense to limit the size of segments.
	//
	//If indexation speed have more priority for your - make this parameter lower.
	//If search speed is more important - make this parameter higher.
	//Note: 1Kb = 1 vector of size 256
	MaxSegmentSize *uint64 `protobuf:"varint,4,opt,name=max_segment_size,json=maxSegmentSize,proto3,oneof" json:"max_segment_size,omitempty"`
	//
	//Maximum size (in KiloBytes) of vectors to store in-memory per segment.
	//Segments larger than this threshold will be stored as read-only memmaped file.
	//To enable memmap storage, lower the threshold
	//Note: 1Kb = 1 vector of size 256
	MemmapThreshold *uint64 `protobuf:"varint,5,opt,name=memmap_threshold,json=memmapThreshold,proto3,oneof" json:"memmap_threshold,omitempty"`
	//
	//Maximum size (in KiloBytes) of vectors allowed for plain index.
	//Default value based on https://github.com/google-research/google-research/blob/master/scann/docs/algorithms.md
	//Note: 1Kb = 1 vector of size 256
	IndexingThreshold *uint64 `protobuf:"varint,6,opt,name=indexing_threshold,json=indexingThreshold,proto3,oneof" json:"indexing_threshold,omitempty"`
	//
	//Interval between forced flushes.
	FlushIntervalSec *uint64 `protobuf:"varint,7,opt,name=flush_interval_sec,json=flushIntervalSec,proto3,oneof" json:"flush_interval_sec,omitempty"`
	//
	//Max number of threads, which can be used for optimization. If 0 - `NUM_CPU - 1` will be used
	MaxOptimizationThreads *uint64 `protobuf:"varint,8,opt,name=max_optimization_threads,json=maxOptimizationThreads,proto3,oneof" json:"max_optimization_threads,omitempty"`
}

func (x *OptimizersConfigDiff) Reset() {
	*x = OptimizersConfigDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collections_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptimizersConfigDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptimizersConfigDiff) ProtoMessage() {}

func (x *OptimizersConfigDiff) ProtoReflect() protoreflect.Message {
	mi := &file_collections_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptimizersConfigDiff.ProtoReflect.Descriptor instead.
func (*OptimizersConfigDiff) Descriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{11}
}

func (x *OptimizersConfigDiff) GetDeletedThreshold() float64 {
	if x != nil && x.DeletedThreshold != nil {
		return *x.DeletedThreshold
	}
	return 0
}

func (x *OptimizersConfigDiff) GetVacuumMinVectorNumber() uint64 {
	if x != nil && x.VacuumMinVectorNumber != nil {
		return *x.VacuumMinVectorNumber
	}
	return 0
}

func (x *OptimizersConfigDiff) GetDefaultSegmentNumber() uint64 {
	if x != nil && x.DefaultSegmentNumber != nil {
		return *x.DefaultSegmentNumber
	}
	return 0
}

func (x *OptimizersConfigDiff) GetMaxSegmentSize() uint64 {
	if x != nil && x.MaxSegmentSize != nil {
		return *x.MaxSegmentSize
	}
	return 0
}

func (x *OptimizersConfigDiff) GetMemmapThreshold() uint64 {
	if x != nil && x.MemmapThreshold != nil {
		return *x.MemmapThreshold
	}
	return 0
}

func (x *OptimizersConfigDiff) GetIndexingThreshold() uint64 {
	if x != nil && x.IndexingThreshold != nil {
		return *x.IndexingThreshold
	}
	return 0
}

func (x *OptimizersConfigDiff) GetFlushIntervalSec() uint64 {
	if x != nil && x.FlushIntervalSec != nil {
		return *x.FlushIntervalSec
	}
	return 0
}

func (x *OptimizersConfigDiff) GetMaxOptimizationThreads() uint64 {
	if x != nil && x.MaxOptimizationThreads != nil {
		return *x.MaxOptimizationThreads
	}
	return 0
}

type CreateCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName   string                `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`             // Name of the collection
	HnswConfig       *HnswConfigDiff       `protobuf:"bytes,4,opt,name=hnsw_config,json=hnswConfig,proto3,oneof" json:"hnsw_config,omitempty"`                   // Configuration of vector index
	WalConfig        *WalConfigDiff        `protobuf:"bytes,5,opt,name=wal_config,json=walConfig,proto3,oneof" json:"wal_config,omitempty"`                      // Configuration of the Write-Ahead-Log
	OptimizersConfig *OptimizersConfigDiff `protobuf:"bytes,6,opt,name=optimizers_config,json=optimizersConfig,proto3,oneof" json:"optimizers_config,omitempty"` // Configuration of the optimizers
	ShardNumber      *uint32               `protobuf:"varint,7,opt,name=shard_number,json=shardNumber,proto3,oneof" json:"shard_number,omitempty"`               // Number of shards in the collection, default = 1
	OnDiskPayload    *bool                 `protobuf:"varint,8,opt,name=on_disk_payload,json=onDiskPayload,proto3,oneof" json:"on_disk_payload,omitempty"`       // If true - point's payload will not be stored in memory
	Timeout          *uint64               `protobuf:"varint,9,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`                                          // Wait timeout for operation commit in seconds, if not specified - default value will be supplied
	VectorsConfig    *VectorsConfig        `protobuf:"bytes,10,opt,name=vectors_config,json=vectorsConfig,proto3,oneof" json:"vectors_config,omitempty"`         // Configuration for vectors
}

func (x *CreateCollection) Reset() {
	*x = CreateCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collections_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCollection) ProtoMessage() {}

func (x *CreateCollection) ProtoReflect() protoreflect.Message {
	mi := &file_collections_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCollection.ProtoReflect.Descriptor instead.
func (*CreateCollection) Descriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{12}
}

func (x *CreateCollection) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *CreateCollection) GetHnswConfig() *HnswConfigDiff {
	if x != nil {
		return x.HnswConfig
	}
	return nil
}

func (x *CreateCollection) GetWalConfig() *WalConfigDiff {
	if x != nil {
		return x.WalConfig
	}
	return nil
}

func (x *CreateCollection) GetOptimizersConfig() *OptimizersConfigDiff {
	if x != nil {
		return x.OptimizersConfig
	}
	return nil
}

func (x *CreateCollection) GetShardNumber() uint32 {
	if x != nil && x.ShardNumber != nil {
		return *x.ShardNumber
	}
	return 0
}

func (x *CreateCollection) GetOnDiskPayload() bool {
	if x != nil && x.OnDiskPayload != nil {
		return *x.OnDiskPayload
	}
	return false
}

func (x *CreateCollection) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

func (x *CreateCollection) GetVectorsConfig() *VectorsConfig {
	if x != nil {
		return x.VectorsConfig
	}
	return nil
}

type UpdateCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName   string                `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`             // Name of the collection
	OptimizersConfig *OptimizersConfigDiff `protobuf:"bytes,2,opt,name=optimizers_config,json=optimizersConfig,proto3,oneof" json:"optimizers_config,omitempty"` // New configuration parameters for the collection
	Timeout          *uint64               `protobuf:"varint,3,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`                                          // Wait timeout for operation commit in seconds, if not specified - default value will be supplied
}

func (x *UpdateCollection) Reset() {
	*x = UpdateCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collections_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCollection) ProtoMessage() {}

func (x *UpdateCollection) ProtoReflect() protoreflect.Message {
	mi := &file_collections_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCollection.ProtoReflect.Descriptor instead.
func (*UpdateCollection) Descriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateCollection) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *UpdateCollection) GetOptimizersConfig() *OptimizersConfigDiff {
	if x != nil {
		return x.OptimizersConfig
	}
	return nil
}

func (x *UpdateCollection) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

type DeleteCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string  `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"` // Name of the collection
	Timeout        *uint64 `protobuf:"varint,2,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`                              // Wait timeout for operation commit in seconds, if not specified - default value will be supplied
}

func (x *DeleteCollection) Reset() {
	*x = DeleteCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collections_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCollection) ProtoMessage() {}

func (x *DeleteCollection) ProtoReflect() protoreflect.Message {
	mi := &file_collections_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCollection.ProtoReflect.Descriptor instead.
func (*DeleteCollection) Descriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteCollection) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *DeleteCollection) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

type CollectionOperationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` // if operation made changes
	Time   float64 `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"`    // Time spent to process
}

func (x *CollectionOperationResponse) Reset() {
	*x = CollectionOperationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collections_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionOperationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionOperationResponse) ProtoMessage() {}

func (x *CollectionOperationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_collections_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionOperationResponse.ProtoReflect.Descriptor instead.
func (*CollectionOperationResponse) Descriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{15}
}

func (x *CollectionOperationResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *CollectionOperationResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type CollectionParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardNumber   uint32         `protobuf:"varint,3,opt,name=shard_number,json=shardNumber,proto3" json:"shard_number,omitempty"`            // Number of shards in collection
	OnDiskPayload bool           `protobuf:"varint,4,opt,name=on_disk_payload,json=onDiskPayload,proto3" json:"on_disk_payload,omitempty"`    // If true - point's payload will not be stored in memory
	VectorsConfig *VectorsConfig `protobuf:"bytes,5,opt,name=vectors_config,json=vectorsConfig,proto3,oneof" json:"vectors_config,omitempty"` // Configuration for vectors
}

func (x *CollectionParams) Reset() {
	*x = CollectionParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collections_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionParams) ProtoMessage() {}

func (x *CollectionParams) ProtoReflect() protoreflect.Message {
	mi := &file_collections_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionParams.ProtoReflect.Descriptor instead.
func (*CollectionParams) Descriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{16}
}

func (x *CollectionParams) GetShardNumber() uint32 {
	if x != nil {
		return x.ShardNumber
	}
	return 0
}

func (x *CollectionParams) GetOnDiskPayload() bool {
	if x != nil {
		return x.OnDiskPayload
	}
	return false
}

func (x *CollectionParams) GetVectorsConfig() *VectorsConfig {
	if x != nil {
		return x.VectorsConfig
	}
	return nil
}

type CollectionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params          *CollectionParams     `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`                                          // Collection parameters
	HnswConfig      *HnswConfigDiff       `protobuf:"bytes,2,opt,name=hnsw_config,json=hnswConfig,proto3" json:"hnsw_config,omitempty"`                // Configuration of vector index
	OptimizerConfig *OptimizersConfigDiff `protobuf:"bytes,3,opt,name=optimizer_config,json=optimizerConfig,proto3" json:"optimizer_config,omitempty"` // Configuration of the optimizers
	WalConfig       *WalConfigDiff        `protobuf:"bytes,4,opt,name=wal_config,json=walConfig,proto3" json:"wal_config,omitempty"`                   // Configuration of the Write-Ahead-Log
}

func (x *CollectionConfig) Reset() {
	*x = CollectionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collections_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionConfig) ProtoMessage() {}

func (x *CollectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_collections_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionConfig.ProtoReflect.Descriptor instead.
func (*CollectionConfig) Descriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{17}
}

func (x *CollectionConfig) GetParams() *CollectionParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *CollectionConfig) GetHnswConfig() *HnswConfigDiff {
	if x != nil {
		return x.HnswConfig
	}
	return nil
}

func (x *CollectionConfig) GetOptimizerConfig() *OptimizersConfigDiff {
	if x != nil {
		return x.OptimizerConfig
	}
	return nil
}

func (x *CollectionConfig) GetWalConfig() *WalConfigDiff {
	if x != nil {
		return x.WalConfig
	}
	return nil
}

type TextIndexParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tokenizer   TokenizerType `protobuf:"varint,1,opt,name=tokenizer,proto3,enum=qdrant.TokenizerType" json:"tokenizer,omitempty"`      // Tokenizer type
	Lowercase   *bool         `protobuf:"varint,2,opt,name=lowercase,proto3,oneof" json:"lowercase,omitempty"`                          // If true - all tokens will be lowercased
	MinTokenLen *uint64       `protobuf:"varint,3,opt,name=min_token_len,json=minTokenLen,proto3,oneof" json:"min_token_len,omitempty"` // Minimal token length
	MaxTokenLen *uint64       `protobuf:"varint,4,opt,name=max_token_len,json=maxTokenLen,proto3,oneof" json:"max_token_len,omitempty"` // Maximal token length
}

func (x *TextIndexParams) Reset() {
	*x = TextIndexParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collections_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextIndexParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextIndexParams) ProtoMessage() {}

func (x *TextIndexParams) ProtoReflect() protoreflect.Message {
	mi := &file_collections_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextIndexParams.ProtoReflect.Descriptor instead.
func (*TextIndexParams) Descriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{18}
}

func (x *TextIndexParams) GetTokenizer() TokenizerType {
	if x != nil {
		return x.Tokenizer
	}
	return TokenizerType_Unknown
}

func (x *TextIndexParams) GetLowercase() bool {
	if x != nil && x.Lowercase != nil {
		return *x.Lowercase
	}
	return false
}

func (x *TextIndexParams) GetMinTokenLen() uint64 {
	if x != nil && x.MinTokenLen != nil {
		return *x.MinTokenLen
	}
	return 0
}

func (x *TextIndexParams) GetMaxTokenLen() uint64 {
	if x != nil && x.MaxTokenLen != nil {
		return *x.MaxTokenLen
	}
	return 0
}

type PayloadIndexParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to IndexParams:
	//	*PayloadIndexParams_TextIndexParams
	IndexParams isPayloadIndexParams_IndexParams `protobuf_oneof:"index_params"`
}

func (x *PayloadIndexParams) Reset() {
	*x = PayloadIndexParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collections_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayloadIndexParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadIndexParams) ProtoMessage() {}

func (x *PayloadIndexParams) ProtoReflect() protoreflect.Message {
	mi := &file_collections_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadIndexParams.ProtoReflect.Descriptor instead.
func (*PayloadIndexParams) Descriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{19}
}

func (m *PayloadIndexParams) GetIndexParams() isPayloadIndexParams_IndexParams {
	if m != nil {
		return m.IndexParams
	}
	return nil
}

func (x *PayloadIndexParams) GetTextIndexParams() *TextIndexParams {
	if x, ok := x.GetIndexParams().(*PayloadIndexParams_TextIndexParams); ok {
		return x.TextIndexParams
	}
	return nil
}

type isPayloadIndexParams_IndexParams interface {
	isPayloadIndexParams_IndexParams()
}

type PayloadIndexParams_TextIndexParams struct {
	TextIndexParams *TextIndexParams `protobuf:"bytes,1,opt,name=text_index_params,json=textIndexParams,proto3,oneof"` // Parameters for text index
}

func (*PayloadIndexParams_TextIndexParams) isPayloadIndexParams_IndexParams() {}

type PayloadSchemaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataType PayloadSchemaType   `protobuf:"varint,1,opt,name=data_type,json=dataType,proto3,enum=qdrant.PayloadSchemaType" json:"data_type,omitempty"` // Field data type
	Params   *PayloadIndexParams `protobuf:"bytes,2,opt,name=params,proto3,oneof" json:"params,omitempty"`                                              // Field index parameters
}

func (x *PayloadSchemaInfo) Reset() {
	*x = PayloadSchemaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collections_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayloadSchemaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadSchemaInfo) ProtoMessage() {}

func (x *PayloadSchemaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_collections_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadSchemaInfo.ProtoReflect.Descriptor instead.
func (*PayloadSchemaInfo) Descriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{20}
}

func (x *PayloadSchemaInfo) GetDataType() PayloadSchemaType {
	if x != nil {
		return x.DataType
	}
	return PayloadSchemaType_UnknownType
}

func (x *PayloadSchemaInfo) GetParams() *PayloadIndexParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type CollectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status              CollectionStatus              `protobuf:"varint,1,opt,name=status,proto3,enum=qdrant.CollectionStatus" json:"status,omitempty"`                                                                                              // operating condition of the collection
	OptimizerStatus     *OptimizerStatus              `protobuf:"bytes,2,opt,name=optimizer_status,json=optimizerStatus,proto3" json:"optimizer_status,omitempty"`                                                                                   // status of collection optimizers
	VectorsCount        uint64                        `protobuf:"varint,3,opt,name=vectors_count,json=vectorsCount,proto3" json:"vectors_count,omitempty"`                                                                                           // number of vectors in the collection
	SegmentsCount       uint64                        `protobuf:"varint,4,opt,name=segments_count,json=segmentsCount,proto3" json:"segments_count,omitempty"`                                                                                        // Number of independent segments
	Config              *CollectionConfig             `protobuf:"bytes,7,opt,name=config,proto3" json:"config,omitempty"`                                                                                                                            // Configuration
	PayloadSchema       map[string]*PayloadSchemaInfo `protobuf:"bytes,8,rep,name=payload_schema,json=payloadSchema,proto3" json:"payload_schema,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Collection data types
	PointsCount         uint64                        `protobuf:"varint,9,opt,name=points_count,json=pointsCount,proto3" json:"points_count,omitempty"`                                                                                              // number of points in the collection
	IndexedVectorsCount *uint64                       `protobuf:"varint,10,opt,name=indexed_vectors_count,json=indexedVectorsCount,proto3,oneof" json:"indexed_vectors_count,omitempty"`                                                             // number of indexed vectors in the collection.
}

func (x *CollectionInfo) Reset() {
	*x = CollectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collections_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionInfo) ProtoMessage() {}

func (x *CollectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_collections_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionInfo.ProtoReflect.Descriptor instead.
func (*CollectionInfo) Descriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{21}
}

func (x *CollectionInfo) GetStatus() CollectionStatus {
	if x != nil {
		return x.Status
	}
	return CollectionStatus_UnknownCollectionStatus
}

func (x *CollectionInfo) GetOptimizerStatus() *OptimizerStatus {
	if x != nil {
		return x.OptimizerStatus
	}
	return nil
}

func (x *CollectionInfo) GetVectorsCount() uint64 {
	if x != nil {
		return x.VectorsCount
	}
	return 0
}

func (x *CollectionInfo) GetSegmentsCount() uint64 {
	if x != nil {
		return x.SegmentsCount
	}
	return 0
}

func (x *CollectionInfo) GetConfig() *CollectionConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CollectionInfo) GetPayloadSchema() map[string]*PayloadSchemaInfo {
	if x != nil {
		return x.PayloadSchema
	}
	return nil
}

func (x *CollectionInfo) GetPointsCount() uint64 {
	if x != nil {
		return x.PointsCount
	}
	return 0
}

func (x *CollectionInfo) GetIndexedVectorsCount() uint64 {
	if x != nil && x.IndexedVectorsCount != nil {
		return *x.IndexedVectorsCount
	}
	return 0
}

type ChangeAliases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions []*AliasOperations `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`        // List of actions
	Timeout *uint64            `protobuf:"varint,2,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"` // Wait timeout for operation commit in seconds, if not specified - default value will be supplied
}

func (x *ChangeAliases) Reset() {
	*x = ChangeAliases{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collections_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeAliases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeAliases) ProtoMessage() {}

func (x *ChangeAliases) ProtoReflect() protoreflect.Message {
	mi := &file_collections_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeAliases.ProtoReflect.Descriptor instead.
func (*ChangeAliases) Descriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{22}
}

func (x *ChangeAliases) GetActions() []*AliasOperations {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *ChangeAliases) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

type AliasOperations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//	*AliasOperations_CreateAlias
	//	*AliasOperations_RenameAlias
	//	*AliasOperations_DeleteAlias
	Action isAliasOperations_Action `protobuf_oneof:"action"`
}

func (x *AliasOperations) Reset() {
	*x = AliasOperations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collections_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AliasOperations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AliasOperations) ProtoMessage() {}

func (x *AliasOperations) ProtoReflect() protoreflect.Message {
	mi := &file_collections_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AliasOperations.ProtoReflect.Descriptor instead.
func (*AliasOperations) Descriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{23}
}

func (m *AliasOperations) GetAction() isAliasOperations_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *AliasOperations) GetCreateAlias() *CreateAlias {
	if x, ok := x.GetAction().(*AliasOperations_CreateAlias); ok {
		return x.CreateAlias
	}
	return nil
}

func (x *AliasOperations) GetRenameAlias() *RenameAlias {
	if x, ok := x.GetAction().(*AliasOperations_RenameAlias); ok {
		return x.RenameAlias
	}
	return nil
}

func (x *AliasOperations) GetDeleteAlias() *DeleteAlias {
	if x, ok := x.GetAction().(*AliasOperations_DeleteAlias); ok {
		return x.DeleteAlias
	}
	return nil
}

type isAliasOperations_Action interface {
	isAliasOperations_Action()
}

type AliasOperations_CreateAlias struct {
	CreateAlias *CreateAlias `protobuf:"bytes,1,opt,name=create_alias,json=createAlias,proto3,oneof"`
}

type AliasOperations_RenameAlias struct {
	RenameAlias *RenameAlias `protobuf:"bytes,2,opt,name=rename_alias,json=renameAlias,proto3,oneof"`
}

type AliasOperations_DeleteAlias struct {
	DeleteAlias *DeleteAlias `protobuf:"bytes,3,opt,name=delete_alias,json=deleteAlias,proto3,oneof"`
}

func (*AliasOperations_CreateAlias) isAliasOperations_Action() {}

func (*AliasOperations_RenameAlias) isAliasOperations_Action() {}

func (*AliasOperations_DeleteAlias) isAliasOperations_Action() {}

type CreateAlias struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"` // Name of the collection
	AliasName      string `protobuf:"bytes,2,opt,name=alias_name,json=aliasName,proto3" json:"alias_name,omitempty"`                // New name of the alias
}

func (x *CreateAlias) Reset() {
	*x = CreateAlias{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collections_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAlias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAlias) ProtoMessage() {}

func (x *CreateAlias) ProtoReflect() protoreflect.Message {
	mi := &file_collections_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAlias.ProtoReflect.Descriptor instead.
func (*CreateAlias) Descriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{24}
}

func (x *CreateAlias) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *CreateAlias) GetAliasName() string {
	if x != nil {
		return x.AliasName
	}
	return ""
}

type RenameAlias struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldAliasName string `protobuf:"bytes,1,opt,name=old_alias_name,json=oldAliasName,proto3" json:"old_alias_name,omitempty"` // Name of the alias to rename
	NewAliasName string `protobuf:"bytes,2,opt,name=new_alias_name,json=newAliasName,proto3" json:"new_alias_name,omitempty"` // Name of the alias
}

func (x *RenameAlias) Reset() {
	*x = RenameAlias{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collections_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameAlias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameAlias) ProtoMessage() {}

func (x *RenameAlias) ProtoReflect() protoreflect.Message {
	mi := &file_collections_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameAlias.ProtoReflect.Descriptor instead.
func (*RenameAlias) Descriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{25}
}

func (x *RenameAlias) GetOldAliasName() string {
	if x != nil {
		return x.OldAliasName
	}
	return ""
}

func (x *RenameAlias) GetNewAliasName() string {
	if x != nil {
		return x.NewAliasName
	}
	return ""
}

type DeleteAlias struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AliasName string `protobuf:"bytes,1,opt,name=alias_name,json=aliasName,proto3" json:"alias_name,omitempty"` // Name of the alias
}

func (x *DeleteAlias) Reset() {
	*x = DeleteAlias{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collections_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAlias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAlias) ProtoMessage() {}

func (x *DeleteAlias) ProtoReflect() protoreflect.Message {
	mi := &file_collections_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAlias.ProtoReflect.Descriptor instead.
func (*DeleteAlias) Descriptor() ([]byte, []int) {
	return file_collections_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteAlias) GetAliasName() string {
	if x != nil {
		return x.AliasName
	}
	return ""
}

var File_collections_proto protoreflect.FileDescriptor

var file_collections_proto_rawDesc = []byte{
	0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x22, 0x50, 0x0a, 0x0c, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x2c, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x93, 0x01,
	0x0a, 0x0f, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4d, 0x61,
	0x70, 0x12, 0x32, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x4d, 0x61, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x03, 0x6d, 0x61, 0x70, 0x1a, 0x4c, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x83, 0x01, 0x0a, 0x0d, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4d,
	0x61, 0x70, 0x48, 0x00, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4d, 0x61, 0x70, 0x42,
	0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x43, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x18,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x6e, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x0f, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0xff, 0x01, 0x0a, 0x0e, 0x48, 0x6e, 0x73, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69,
	0x66, 0x66, 0x12, 0x11, 0x0a, 0x01, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x01, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x65, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0b, 0x65,
	0x66, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x13, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x11, 0x66, 0x75,
	0x6c, 0x6c, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x03, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x88, 0x01, 0x01, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x6d, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x73, 0x22, 0x9a, 0x01, 0x0a, 0x0d, 0x57, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x69, 0x66, 0x66, 0x12, 0x2b, 0x0a, 0x0f, 0x77, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x6d, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0d,
	0x77, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x4d, 0x62, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x12, 0x77, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x61, 0x68, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x10,
	0x77, 0x61, 0x6c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x68, 0x65, 0x61, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x62, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x77, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x68, 0x65, 0x61, 0x64, 0x22, 0x89,
	0x05, 0x0a, 0x14, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x69, 0x66, 0x66, 0x12, 0x30, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x00, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18, 0x76, 0x61, 0x63,
	0x75, 0x75, 0x6d, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x15, 0x76,
	0x61, 0x63, 0x75, 0x75, 0x6d, 0x4d, 0x69, 0x6e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x0e,
	0x6d, 0x61, 0x78, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x0f, 0x6d,
	0x65, 0x6d, 0x6d, 0x61, 0x70, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x12, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52,
	0x11, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x06, 0x52, 0x10, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x53, 0x65, 0x63, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x07, 0x52, 0x16, 0x6d, 0x61,
	0x78, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x1b, 0x0a,
	0x19, 0x5f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d,
	0x65, 0x6d, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x42, 0x1b, 0x0a,
	0x19, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x22, 0xc0, 0x04, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x68, 0x6e, 0x73, 0x77,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x48, 0x6e, 0x73, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x69, 0x66, 0x66, 0x48, 0x00, 0x52, 0x0a, 0x68, 0x6e, 0x73, 0x77, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x77, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x57, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x66,
	0x66, 0x48, 0x01, 0x52, 0x09, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x4e, 0x0a, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x66, 0x66, 0x48, 0x02, 0x52, 0x10, 0x6f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6f, 0x6e, 0x5f,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x04, 0x52, 0x0d, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x06, 0x52, 0x0d, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x68, 0x6e, 0x73,
	0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xcc, 0x01,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x69, 0x66, 0x66, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65,
	0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x66, 0x0a, 0x10,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x22, 0x49, 0x0a, 0x1b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0xbf, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x6e, 0x5f, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x41, 0x0a, 0x0e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x0d, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88,
	0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x22, 0xfc, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x68, 0x6e, 0x73, 0x77,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x48, 0x6e, 0x73, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x69, 0x66, 0x66, 0x52, 0x0a, 0x68, 0x6e, 0x73, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x47, 0x0a, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x66, 0x66, 0x52, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x0a, 0x77, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x69, 0x66, 0x66, 0x52, 0x09, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0xed, 0x01, 0x0a, 0x0f, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x09, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d,
	0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c,
	0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x65, 0x6e,
	0x22, 0x6b, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x0e, 0x0a,
	0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x8f, 0x01,
	0x0a, 0x11, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22,
	0xb5, 0x04, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x50, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x15, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x13, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x64, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x1a, 0x5b, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x05, 0x10,
	0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0x6d, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xc9, 0x01, 0x0a, 0x0f, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x48,
	0x00, 0x52, 0x0b, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x38,
	0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x0b, 0x52, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x2a, 0x40, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x13,
	0x0a, 0x0f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6f, 0x73, 0x69, 0x6e, 0x65, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x45, 0x75, 0x63, 0x6c, 0x69, 0x64, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x44,
	0x6f, 0x74, 0x10, 0x03, 0x2a, 0x4f, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03,
	0x52, 0x65, 0x64, 0x10, 0x03, 0x2a, 0x5c, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x10, 0x03,
	0x12, 0x07, 0x0a, 0x03, 0x47, 0x65, 0x6f, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x65, 0x78,
	0x74, 0x10, 0x05, 0x2a, 0x42, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x57, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x57, 0x6f, 0x72, 0x64, 0x10, 0x03, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_collections_proto_rawDescOnce sync.Once
	file_collections_proto_rawDescData = file_collections_proto_rawDesc
)

func file_collections_proto_rawDescGZIP() []byte {
	file_collections_proto_rawDescOnce.Do(func() {
		file_collections_proto_rawDescData = protoimpl.X.CompressGZIP(file_collections_proto_rawDescData)
	})
	return file_collections_proto_rawDescData
}

var file_collections_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_collections_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_collections_proto_goTypes = []interface{}{
	(Distance)(0),                       // 0: qdrant.Distance
	(CollectionStatus)(0),               // 1: qdrant.CollectionStatus
	(PayloadSchemaType)(0),              // 2: qdrant.PayloadSchemaType
	(TokenizerType)(0),                  // 3: qdrant.TokenizerType
	(*VectorParams)(nil),                // 4: qdrant.VectorParams
	(*VectorParamsMap)(nil),             // 5: qdrant.VectorParamsMap
	(*VectorsConfig)(nil),               // 6: qdrant.VectorsConfig
	(*GetCollectionInfoRequest)(nil),    // 7: qdrant.GetCollectionInfoRequest
	(*ListCollectionsRequest)(nil),      // 8: qdrant.ListCollectionsRequest
	(*CollectionDescription)(nil),       // 9: qdrant.CollectionDescription
	(*GetCollectionInfoResponse)(nil),   // 10: qdrant.GetCollectionInfoResponse
	(*ListCollectionsResponse)(nil),     // 11: qdrant.ListCollectionsResponse
	(*OptimizerStatus)(nil),             // 12: qdrant.OptimizerStatus
	(*HnswConfigDiff)(nil),              // 13: qdrant.HnswConfigDiff
	(*WalConfigDiff)(nil),               // 14: qdrant.WalConfigDiff
	(*OptimizersConfigDiff)(nil),        // 15: qdrant.OptimizersConfigDiff
	(*CreateCollection)(nil),            // 16: qdrant.CreateCollection
	(*UpdateCollection)(nil),            // 17: qdrant.UpdateCollection
	(*DeleteCollection)(nil),            // 18: qdrant.DeleteCollection
	(*CollectionOperationResponse)(nil), // 19: qdrant.CollectionOperationResponse
	(*CollectionParams)(nil),            // 20: qdrant.CollectionParams
	(*CollectionConfig)(nil),            // 21: qdrant.CollectionConfig
	(*TextIndexParams)(nil),             // 22: qdrant.TextIndexParams
	(*PayloadIndexParams)(nil),          // 23: qdrant.PayloadIndexParams
	(*PayloadSchemaInfo)(nil),           // 24: qdrant.PayloadSchemaInfo
	(*CollectionInfo)(nil),              // 25: qdrant.CollectionInfo
	(*ChangeAliases)(nil),               // 26: qdrant.ChangeAliases
	(*AliasOperations)(nil),             // 27: qdrant.AliasOperations
	(*CreateAlias)(nil),                 // 28: qdrant.CreateAlias
	(*RenameAlias)(nil),                 // 29: qdrant.RenameAlias
	(*DeleteAlias)(nil),                 // 30: qdrant.DeleteAlias
	nil,                                 // 31: qdrant.VectorParamsMap.MapEntry
	nil,                                 // 32: qdrant.CollectionInfo.PayloadSchemaEntry
}
var file_collections_proto_depIdxs = []int32{
	0,  // 0: qdrant.VectorParams.distance:type_name -> qdrant.Distance
	31, // 1: qdrant.VectorParamsMap.map:type_name -> qdrant.VectorParamsMap.MapEntry
	4,  // 2: qdrant.VectorsConfig.params:type_name -> qdrant.VectorParams
	5,  // 3: qdrant.VectorsConfig.params_map:type_name -> qdrant.VectorParamsMap
	25, // 4: qdrant.GetCollectionInfoResponse.result:type_name -> qdrant.CollectionInfo
	9,  // 5: qdrant.ListCollectionsResponse.collections:type_name -> qdrant.CollectionDescription
	13, // 6: qdrant.CreateCollection.hnsw_config:type_name -> qdrant.HnswConfigDiff
	14, // 7: qdrant.CreateCollection.wal_config:type_name -> qdrant.WalConfigDiff
	15, // 8: qdrant.CreateCollection.optimizers_config:type_name -> qdrant.OptimizersConfigDiff
	6,  // 9: qdrant.CreateCollection.vectors_config:type_name -> qdrant.VectorsConfig
	15, // 10: qdrant.UpdateCollection.optimizers_config:type_name -> qdrant.OptimizersConfigDiff
	6,  // 11: qdrant.CollectionParams.vectors_config:type_name -> qdrant.VectorsConfig
	20, // 12: qdrant.CollectionConfig.params:type_name -> qdrant.CollectionParams
	13, // 13: qdrant.CollectionConfig.hnsw_config:type_name -> qdrant.HnswConfigDiff
	15, // 14: qdrant.CollectionConfig.optimizer_config:type_name -> qdrant.OptimizersConfigDiff
	14, // 15: qdrant.CollectionConfig.wal_config:type_name -> qdrant.WalConfigDiff
	3,  // 16: qdrant.TextIndexParams.tokenizer:type_name -> qdrant.TokenizerType
	22, // 17: qdrant.PayloadIndexParams.text_index_params:type_name -> qdrant.TextIndexParams
	2,  // 18: qdrant.PayloadSchemaInfo.data_type:type_name -> qdrant.PayloadSchemaType
	23, // 19: qdrant.PayloadSchemaInfo.params:type_name -> qdrant.PayloadIndexParams
	1,  // 20: qdrant.CollectionInfo.status:type_name -> qdrant.CollectionStatus
	12, // 21: qdrant.CollectionInfo.optimizer_status:type_name -> qdrant.OptimizerStatus
	21, // 22: qdrant.CollectionInfo.config:type_name -> qdrant.CollectionConfig
	32, // 23: qdrant.CollectionInfo.payload_schema:type_name -> qdrant.CollectionInfo.PayloadSchemaEntry
	27, // 24: qdrant.ChangeAliases.actions:type_name -> qdrant.AliasOperations
	28, // 25: qdrant.AliasOperations.create_alias:type_name -> qdrant.CreateAlias
	29, // 26: qdrant.AliasOperations.rename_alias:type_name -> qdrant.RenameAlias
	30, // 27: qdrant.AliasOperations.delete_alias:type_name -> qdrant.DeleteAlias
	4,  // 28: qdrant.VectorParamsMap.MapEntry.value:type_name -> qdrant.VectorParams
	24, // 29: qdrant.CollectionInfo.PayloadSchemaEntry.value:type_name -> qdrant.PayloadSchemaInfo
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_collections_proto_init() }
func file_collections_proto_init() {
	if File_collections_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_collections_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collections_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorParamsMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collections_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collections_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollectionInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collections_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCollectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collections_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collections_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollectionInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collections_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCollectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collections_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptimizerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collections_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HnswConfigDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collections_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalConfigDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collections_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptimizersConfigDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collections_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collections_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collections_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collections_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionOperationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collections_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collections_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collections_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextIndexParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collections_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayloadIndexParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collections_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayloadSchemaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collections_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collections_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeAliases); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collections_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AliasOperations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collections_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAlias); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collections_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameAlias); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collections_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAlias); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_collections_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*VectorsConfig_Params)(nil),
		(*VectorsConfig_ParamsMap)(nil),
	}
	file_collections_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_collections_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_collections_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_collections_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_collections_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_collections_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_collections_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_collections_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_collections_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*PayloadIndexParams_TextIndexParams)(nil),
	}
	file_collections_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_collections_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_collections_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_collections_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*AliasOperations_CreateAlias)(nil),
		(*AliasOperations_RenameAlias)(nil),
		(*AliasOperations_DeleteAlias)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_collections_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_collections_proto_goTypes,
		DependencyIndexes: file_collections_proto_depIdxs,
		EnumInfos:         file_collections_proto_enumTypes,
		MessageInfos:      file_collections_proto_msgTypes,
	}.Build()
	File_collections_proto = out.File
	file_collections_proto_rawDesc = nil
	file_collections_proto_goTypes = nil
	file_collections_proto_depIdxs = nil
}
