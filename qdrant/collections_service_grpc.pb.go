// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: collections_service.proto

package collections_service

import (
	collections "./collections"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CollectionsClient is the client API for Collections service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectionsClient interface {
	//
	//Get detailed information about specified existing collection
	Get(ctx context.Context, in *collections.GetCollectionInfoRequest, opts ...grpc.CallOption) (*collections.GetCollectionInfoResponse, error)
	//
	//Get list name of all existing collections
	List(ctx context.Context, in *collections.ListCollectionsRequest, opts ...grpc.CallOption) (*collections.ListCollectionsResponse, error)
	//
	//Create new collection with given parameters
	Create(ctx context.Context, in *collections.CreateCollection, opts ...grpc.CallOption) (*collections.CollectionOperationResponse, error)
	//
	//Update parameters of the existing collection
	Update(ctx context.Context, in *collections.UpdateCollection, opts ...grpc.CallOption) (*collections.CollectionOperationResponse, error)
	//
	//Drop collection and all associated data
	Delete(ctx context.Context, in *collections.DeleteCollection, opts ...grpc.CallOption) (*collections.CollectionOperationResponse, error)
	//
	//Update Aliases of the existing collection
	UpdateAliases(ctx context.Context, in *collections.ChangeAliases, opts ...grpc.CallOption) (*collections.CollectionOperationResponse, error)
}

type collectionsClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectionsClient(cc grpc.ClientConnInterface) CollectionsClient {
	return &collectionsClient{cc}
}

func (c *collectionsClient) Get(ctx context.Context, in *collections.GetCollectionInfoRequest, opts ...grpc.CallOption) (*collections.GetCollectionInfoResponse, error) {
	out := new(collections.GetCollectionInfoResponse)
	err := c.cc.Invoke(ctx, "/qdrant.Collections/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) List(ctx context.Context, in *collections.ListCollectionsRequest, opts ...grpc.CallOption) (*collections.ListCollectionsResponse, error) {
	out := new(collections.ListCollectionsResponse)
	err := c.cc.Invoke(ctx, "/qdrant.Collections/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) Create(ctx context.Context, in *collections.CreateCollection, opts ...grpc.CallOption) (*collections.CollectionOperationResponse, error) {
	out := new(collections.CollectionOperationResponse)
	err := c.cc.Invoke(ctx, "/qdrant.Collections/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) Update(ctx context.Context, in *collections.UpdateCollection, opts ...grpc.CallOption) (*collections.CollectionOperationResponse, error) {
	out := new(collections.CollectionOperationResponse)
	err := c.cc.Invoke(ctx, "/qdrant.Collections/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) Delete(ctx context.Context, in *collections.DeleteCollection, opts ...grpc.CallOption) (*collections.CollectionOperationResponse, error) {
	out := new(collections.CollectionOperationResponse)
	err := c.cc.Invoke(ctx, "/qdrant.Collections/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsClient) UpdateAliases(ctx context.Context, in *collections.ChangeAliases, opts ...grpc.CallOption) (*collections.CollectionOperationResponse, error) {
	out := new(collections.CollectionOperationResponse)
	err := c.cc.Invoke(ctx, "/qdrant.Collections/UpdateAliases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectionsServer is the server API for Collections service.
// All implementations must embed UnimplementedCollectionsServer
// for forward compatibility
type CollectionsServer interface {
	//
	//Get detailed information about specified existing collection
	Get(context.Context, *collections.GetCollectionInfoRequest) (*collections.GetCollectionInfoResponse, error)
	//
	//Get list name of all existing collections
	List(context.Context, *collections.ListCollectionsRequest) (*collections.ListCollectionsResponse, error)
	//
	//Create new collection with given parameters
	Create(context.Context, *collections.CreateCollection) (*collections.CollectionOperationResponse, error)
	//
	//Update parameters of the existing collection
	Update(context.Context, *collections.UpdateCollection) (*collections.CollectionOperationResponse, error)
	//
	//Drop collection and all associated data
	Delete(context.Context, *collections.DeleteCollection) (*collections.CollectionOperationResponse, error)
	//
	//Update Aliases of the existing collection
	UpdateAliases(context.Context, *collections.ChangeAliases) (*collections.CollectionOperationResponse, error)
	mustEmbedUnimplementedCollectionsServer()
}

// UnimplementedCollectionsServer must be embedded to have forward compatible implementations.
type UnimplementedCollectionsServer struct {
}

func (UnimplementedCollectionsServer) Get(context.Context, *collections.GetCollectionInfoRequest) (*collections.GetCollectionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCollectionsServer) List(context.Context, *collections.ListCollectionsRequest) (*collections.ListCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCollectionsServer) Create(context.Context, *collections.CreateCollection) (*collections.CollectionOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCollectionsServer) Update(context.Context, *collections.UpdateCollection) (*collections.CollectionOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCollectionsServer) Delete(context.Context, *collections.DeleteCollection) (*collections.CollectionOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCollectionsServer) UpdateAliases(context.Context, *collections.ChangeAliases) (*collections.CollectionOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAliases not implemented")
}
func (UnimplementedCollectionsServer) mustEmbedUnimplementedCollectionsServer() {}

// UnsafeCollectionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectionsServer will
// result in compilation errors.
type UnsafeCollectionsServer interface {
	mustEmbedUnimplementedCollectionsServer()
}

func RegisterCollectionsServer(s grpc.ServiceRegistrar, srv CollectionsServer) {
	s.RegisterService(&Collections_ServiceDesc, srv)
}

func _Collections_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(collections.GetCollectionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qdrant.Collections/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).Get(ctx, req.(*collections.GetCollectionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(collections.ListCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qdrant.Collections/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).List(ctx, req.(*collections.ListCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(collections.CreateCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qdrant.Collections/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).Create(ctx, req.(*collections.CreateCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(collections.UpdateCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qdrant.Collections/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).Update(ctx, req.(*collections.UpdateCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(collections.DeleteCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qdrant.Collections/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).Delete(ctx, req.(*collections.DeleteCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collections_UpdateAliases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(collections.ChangeAliases)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServer).UpdateAliases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qdrant.Collections/UpdateAliases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServer).UpdateAliases(ctx, req.(*collections.ChangeAliases))
	}
	return interceptor(ctx, in, info, handler)
}

// Collections_ServiceDesc is the grpc.ServiceDesc for Collections service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Collections_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qdrant.Collections",
	HandlerType: (*CollectionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Collections_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Collections_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Collections_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Collections_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Collections_Delete_Handler,
		},
		{
			MethodName: "UpdateAliases",
			Handler:    _Collections_UpdateAliases_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collections_service.proto",
}
