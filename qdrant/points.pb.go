// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.12.4
// source: points.proto

package go_client

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FieldType int32

const (
	FieldType_FieldTypeKeyword FieldType = 0
	FieldType_FieldTypeInteger FieldType = 1
	FieldType_FieldTypeFloat   FieldType = 2
	FieldType_FieldTypeGeo     FieldType = 3
)

// Enum value maps for FieldType.
var (
	FieldType_name = map[int32]string{
		0: "FieldTypeKeyword",
		1: "FieldTypeInteger",
		2: "FieldTypeFloat",
		3: "FieldTypeGeo",
	}
	FieldType_value = map[string]int32{
		"FieldTypeKeyword": 0,
		"FieldTypeInteger": 1,
		"FieldTypeFloat":   2,
		"FieldTypeGeo":     3,
	}
)

func (x FieldType) Enum() *FieldType {
	p := new(FieldType)
	*p = x
	return p
}

func (x FieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_points_proto_enumTypes[0].Descriptor()
}

func (FieldType) Type() protoreflect.EnumType {
	return &file_points_proto_enumTypes[0]
}

func (x FieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldType.Descriptor instead.
func (FieldType) EnumDescriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{0}
}

type UpdateStatus int32

const (
	UpdateStatus_UnknownUpdateStatus UpdateStatus = 0
	UpdateStatus_Acknowledged        UpdateStatus = 1 // Update is received, but not processed yet
	UpdateStatus_Completed           UpdateStatus = 2 // Update is applied and ready for search
)

// Enum value maps for UpdateStatus.
var (
	UpdateStatus_name = map[int32]string{
		0: "UnknownUpdateStatus",
		1: "Acknowledged",
		2: "Completed",
	}
	UpdateStatus_value = map[string]int32{
		"UnknownUpdateStatus": 0,
		"Acknowledged":        1,
		"Completed":           2,
	}
)

func (x UpdateStatus) Enum() *UpdateStatus {
	p := new(UpdateStatus)
	*p = x
	return p
}

func (x UpdateStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_points_proto_enumTypes[1].Descriptor()
}

func (UpdateStatus) Type() protoreflect.EnumType {
	return &file_points_proto_enumTypes[1]
}

func (x UpdateStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateStatus.Descriptor instead.
func (UpdateStatus) EnumDescriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{1}
}

type PointId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PointIdOptions:
	//	*PointId_Num
	//	*PointId_Uuid
	PointIdOptions isPointId_PointIdOptions `protobuf_oneof:"point_id_options"`
}

func (x *PointId) Reset() {
	*x = PointId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointId) ProtoMessage() {}

func (x *PointId) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointId.ProtoReflect.Descriptor instead.
func (*PointId) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{0}
}

func (m *PointId) GetPointIdOptions() isPointId_PointIdOptions {
	if m != nil {
		return m.PointIdOptions
	}
	return nil
}

func (x *PointId) GetNum() uint64 {
	if x, ok := x.GetPointIdOptions().(*PointId_Num); ok {
		return x.Num
	}
	return 0
}

func (x *PointId) GetUuid() string {
	if x, ok := x.GetPointIdOptions().(*PointId_Uuid); ok {
		return x.Uuid
	}
	return ""
}

type isPointId_PointIdOptions interface {
	isPointId_PointIdOptions()
}

type PointId_Num struct {
	Num uint64 `protobuf:"varint,1,opt,name=num,proto3,oneof"` // Numerical ID of the point
}

type PointId_Uuid struct {
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3,oneof"` // UUID
}

func (*PointId_Num) isPointId_PointIdOptions() {}

func (*PointId_Uuid) isPointId_PointIdOptions() {}

type UpsertPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string         `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"` // name of the collection
	Wait           *bool          `protobuf:"varint,2,opt,name=wait,proto3,oneof" json:"wait,omitempty"`                                    // Wait until the changes have been applied?
	Points         []*PointStruct `protobuf:"bytes,3,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *UpsertPoints) Reset() {
	*x = UpsertPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertPoints) ProtoMessage() {}

func (x *UpsertPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertPoints.ProtoReflect.Descriptor instead.
func (*UpsertPoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{1}
}

func (x *UpsertPoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *UpsertPoints) GetWait() bool {
	if x != nil && x.Wait != nil {
		return *x.Wait
	}
	return false
}

func (x *UpsertPoints) GetPoints() []*PointStruct {
	if x != nil {
		return x.Points
	}
	return nil
}

type DeletePoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string          `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"` // name of the collection
	Wait           *bool           `protobuf:"varint,2,opt,name=wait,proto3,oneof" json:"wait,omitempty"`                                    // Wait until the changes have been applied?
	Points         *PointsSelector `protobuf:"bytes,3,opt,name=points,proto3" json:"points,omitempty"`                                       // Affected points
}

func (x *DeletePoints) Reset() {
	*x = DeletePoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePoints) ProtoMessage() {}

func (x *DeletePoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePoints.ProtoReflect.Descriptor instead.
func (*DeletePoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{2}
}

func (x *DeletePoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *DeletePoints) GetWait() bool {
	if x != nil && x.Wait != nil {
		return *x.Wait
	}
	return false
}

func (x *DeletePoints) GetPoints() *PointsSelector {
	if x != nil {
		return x.Points
	}
	return nil
}

type GetPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string               `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"` // name of the collection
	Ids            []*PointId           `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`                                             // List of points to retrieve
	WithVector     *bool                `protobuf:"varint,3,opt,name=with_vector,json=withVector,proto3,oneof" json:"with_vector,omitempty"`      // Return point vector with the result.
	WithPayload    *WithPayloadSelector `protobuf:"bytes,4,opt,name=with_payload,json=withPayload,proto3" json:"with_payload,omitempty"`          // Options for specifying which payload to include or not
}

func (x *GetPoints) Reset() {
	*x = GetPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoints) ProtoMessage() {}

func (x *GetPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoints.ProtoReflect.Descriptor instead.
func (*GetPoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{3}
}

func (x *GetPoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *GetPoints) GetIds() []*PointId {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *GetPoints) GetWithVector() bool {
	if x != nil && x.WithVector != nil {
		return *x.WithVector
	}
	return false
}

func (x *GetPoints) GetWithPayload() *WithPayloadSelector {
	if x != nil {
		return x.WithPayload
	}
	return nil
}

type SetPayloadPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string            `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`                                                     // name of the collection
	Wait           *bool             `protobuf:"varint,2,opt,name=wait,proto3,oneof" json:"wait,omitempty"`                                                                                        // Wait until the changes have been applied?
	Payload        map[string]*Value `protobuf:"bytes,3,rep,name=payload,proto3" json:"payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // New payload values
	Points         []*PointId        `protobuf:"bytes,4,rep,name=points,proto3" json:"points,omitempty"`                                                                                           // List of point to modify
}

func (x *SetPayloadPoints) Reset() {
	*x = SetPayloadPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPayloadPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPayloadPoints) ProtoMessage() {}

func (x *SetPayloadPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPayloadPoints.ProtoReflect.Descriptor instead.
func (*SetPayloadPoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{4}
}

func (x *SetPayloadPoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *SetPayloadPoints) GetWait() bool {
	if x != nil && x.Wait != nil {
		return *x.Wait
	}
	return false
}

func (x *SetPayloadPoints) GetPayload() map[string]*Value {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SetPayloadPoints) GetPoints() []*PointId {
	if x != nil {
		return x.Points
	}
	return nil
}

type DeletePayloadPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string     `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"` // name of the collection
	Wait           *bool      `protobuf:"varint,2,opt,name=wait,proto3,oneof" json:"wait,omitempty"`                                    // Wait until the changes have been applied?
	Keys           []string   `protobuf:"bytes,3,rep,name=keys,proto3" json:"keys,omitempty"`                                           // List of keys to delete
	Points         []*PointId `protobuf:"bytes,4,rep,name=points,proto3" json:"points,omitempty"`                                       // Affected points
}

func (x *DeletePayloadPoints) Reset() {
	*x = DeletePayloadPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePayloadPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePayloadPoints) ProtoMessage() {}

func (x *DeletePayloadPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePayloadPoints.ProtoReflect.Descriptor instead.
func (*DeletePayloadPoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{5}
}

func (x *DeletePayloadPoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *DeletePayloadPoints) GetWait() bool {
	if x != nil && x.Wait != nil {
		return *x.Wait
	}
	return false
}

func (x *DeletePayloadPoints) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *DeletePayloadPoints) GetPoints() []*PointId {
	if x != nil {
		return x.Points
	}
	return nil
}

type ClearPayloadPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string          `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"` // name of the collection
	Wait           *bool           `protobuf:"varint,2,opt,name=wait,proto3,oneof" json:"wait,omitempty"`                                    // Wait until the changes have been applied?
	Points         *PointsSelector `protobuf:"bytes,3,opt,name=points,proto3" json:"points,omitempty"`                                       // Affected points
}

func (x *ClearPayloadPoints) Reset() {
	*x = ClearPayloadPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearPayloadPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearPayloadPoints) ProtoMessage() {}

func (x *ClearPayloadPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearPayloadPoints.ProtoReflect.Descriptor instead.
func (*ClearPayloadPoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{6}
}

func (x *ClearPayloadPoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *ClearPayloadPoints) GetWait() bool {
	if x != nil && x.Wait != nil {
		return *x.Wait
	}
	return false
}

func (x *ClearPayloadPoints) GetPoints() *PointsSelector {
	if x != nil {
		return x.Points
	}
	return nil
}

type CreateFieldIndexCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string     `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`               // name of the collection
	Wait           *bool      `protobuf:"varint,2,opt,name=wait,proto3,oneof" json:"wait,omitempty"`                                                  // Wait until the changes have been applied?
	FieldName      string     `protobuf:"bytes,3,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`                              // Field name to index
	FieldType      *FieldType `protobuf:"varint,4,opt,name=field_type,json=fieldType,proto3,enum=qdrant.FieldType,oneof" json:"field_type,omitempty"` // Field type.
}

func (x *CreateFieldIndexCollection) Reset() {
	*x = CreateFieldIndexCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFieldIndexCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFieldIndexCollection) ProtoMessage() {}

func (x *CreateFieldIndexCollection) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFieldIndexCollection.ProtoReflect.Descriptor instead.
func (*CreateFieldIndexCollection) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{7}
}

func (x *CreateFieldIndexCollection) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *CreateFieldIndexCollection) GetWait() bool {
	if x != nil && x.Wait != nil {
		return *x.Wait
	}
	return false
}

func (x *CreateFieldIndexCollection) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *CreateFieldIndexCollection) GetFieldType() FieldType {
	if x != nil && x.FieldType != nil {
		return *x.FieldType
	}
	return FieldType_FieldTypeKeyword
}

type DeleteFieldIndexCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"` // name of the collection
	Wait           *bool  `protobuf:"varint,2,opt,name=wait,proto3,oneof" json:"wait,omitempty"`                                    // Wait until the changes have been applied?
	FieldName      string `protobuf:"bytes,3,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`                // Field name to delete
}

func (x *DeleteFieldIndexCollection) Reset() {
	*x = DeleteFieldIndexCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFieldIndexCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFieldIndexCollection) ProtoMessage() {}

func (x *DeleteFieldIndexCollection) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFieldIndexCollection.ProtoReflect.Descriptor instead.
func (*DeleteFieldIndexCollection) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteFieldIndexCollection) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *DeleteFieldIndexCollection) GetWait() bool {
	if x != nil && x.Wait != nil {
		return *x.Wait
	}
	return false
}

func (x *DeleteFieldIndexCollection) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

type PayloadIncludeSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"` // List of payload keys to include into result
}

func (x *PayloadIncludeSelector) Reset() {
	*x = PayloadIncludeSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayloadIncludeSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadIncludeSelector) ProtoMessage() {}

func (x *PayloadIncludeSelector) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadIncludeSelector.ProtoReflect.Descriptor instead.
func (*PayloadIncludeSelector) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{9}
}

func (x *PayloadIncludeSelector) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type PayloadExcludeSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"` // List of payload keys to exclude from the result
}

func (x *PayloadExcludeSelector) Reset() {
	*x = PayloadExcludeSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayloadExcludeSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadExcludeSelector) ProtoMessage() {}

func (x *PayloadExcludeSelector) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadExcludeSelector.ProtoReflect.Descriptor instead.
func (*PayloadExcludeSelector) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{10}
}

func (x *PayloadExcludeSelector) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type WithPayloadSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SelectorOptions:
	//	*WithPayloadSelector_Enable
	//	*WithPayloadSelector_Include
	//	*WithPayloadSelector_Exclude
	SelectorOptions isWithPayloadSelector_SelectorOptions `protobuf_oneof:"selector_options"`
}

func (x *WithPayloadSelector) Reset() {
	*x = WithPayloadSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithPayloadSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithPayloadSelector) ProtoMessage() {}

func (x *WithPayloadSelector) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithPayloadSelector.ProtoReflect.Descriptor instead.
func (*WithPayloadSelector) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{11}
}

func (m *WithPayloadSelector) GetSelectorOptions() isWithPayloadSelector_SelectorOptions {
	if m != nil {
		return m.SelectorOptions
	}
	return nil
}

func (x *WithPayloadSelector) GetEnable() bool {
	if x, ok := x.GetSelectorOptions().(*WithPayloadSelector_Enable); ok {
		return x.Enable
	}
	return false
}

func (x *WithPayloadSelector) GetInclude() *PayloadIncludeSelector {
	if x, ok := x.GetSelectorOptions().(*WithPayloadSelector_Include); ok {
		return x.Include
	}
	return nil
}

func (x *WithPayloadSelector) GetExclude() *PayloadExcludeSelector {
	if x, ok := x.GetSelectorOptions().(*WithPayloadSelector_Exclude); ok {
		return x.Exclude
	}
	return nil
}

type isWithPayloadSelector_SelectorOptions interface {
	isWithPayloadSelector_SelectorOptions()
}

type WithPayloadSelector_Enable struct {
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3,oneof"` // If `true` - return all payload, if `false` - none
}

type WithPayloadSelector_Include struct {
	Include *PayloadIncludeSelector `protobuf:"bytes,2,opt,name=include,proto3,oneof"`
}

type WithPayloadSelector_Exclude struct {
	Exclude *PayloadExcludeSelector `protobuf:"bytes,3,opt,name=exclude,proto3,oneof"`
}

func (*WithPayloadSelector_Enable) isWithPayloadSelector_SelectorOptions() {}

func (*WithPayloadSelector_Include) isWithPayloadSelector_SelectorOptions() {}

func (*WithPayloadSelector_Exclude) isWithPayloadSelector_SelectorOptions() {}

type SearchParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//Params relevant to HNSW index. Size of the beam in a beam-search.
	//Larger the value - more accurate the result, more time required for search.
	HnswEf *uint64 `protobuf:"varint,1,opt,name=hnsw_ef,json=hnswEf,proto3,oneof" json:"hnsw_ef,omitempty"`
}

func (x *SearchParams) Reset() {
	*x = SearchParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchParams) ProtoMessage() {}

func (x *SearchParams) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchParams.ProtoReflect.Descriptor instead.
func (*SearchParams) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{12}
}

func (x *SearchParams) GetHnswEf() uint64 {
	if x != nil && x.HnswEf != nil {
		return *x.HnswEf
	}
	return 0
}

type SearchPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string               `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`         // name of the collection
	Vector         []float32            `protobuf:"fixed32,2,rep,packed,name=vector,proto3" json:"vector,omitempty"`                                      // vector
	Filter         *Filter              `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`                                               // Filter conditions - return only those points that satisfy the specified conditions
	Top            uint64               `protobuf:"varint,4,opt,name=top,proto3" json:"top,omitempty"`                                                    // Max number of result
	WithVector     *bool                `protobuf:"varint,5,opt,name=with_vector,json=withVector,proto3,oneof" json:"with_vector,omitempty"`              // Return point vector with the result.
	WithPayload    *WithPayloadSelector `protobuf:"bytes,6,opt,name=with_payload,json=withPayload,proto3" json:"with_payload,omitempty"`                  // Options for specifying which payload to include or not
	Params         *SearchParams        `protobuf:"bytes,7,opt,name=params,proto3" json:"params,omitempty"`                                               // Search config
	ScoreThreshold *float32             `protobuf:"fixed32,8,opt,name=score_threshold,json=scoreThreshold,proto3,oneof" json:"score_threshold,omitempty"` // If provided - cut off results with worse scores
}

func (x *SearchPoints) Reset() {
	*x = SearchPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPoints) ProtoMessage() {}

func (x *SearchPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPoints.ProtoReflect.Descriptor instead.
func (*SearchPoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{13}
}

func (x *SearchPoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *SearchPoints) GetVector() []float32 {
	if x != nil {
		return x.Vector
	}
	return nil
}

func (x *SearchPoints) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchPoints) GetTop() uint64 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *SearchPoints) GetWithVector() bool {
	if x != nil && x.WithVector != nil {
		return *x.WithVector
	}
	return false
}

func (x *SearchPoints) GetWithPayload() *WithPayloadSelector {
	if x != nil {
		return x.WithPayload
	}
	return nil
}

func (x *SearchPoints) GetParams() *SearchParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SearchPoints) GetScoreThreshold() float32 {
	if x != nil && x.ScoreThreshold != nil {
		return *x.ScoreThreshold
	}
	return 0
}

type ScrollPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string               `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Filter         *Filter              `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`                                  // Filter conditions - return only those points that satisfy the specified conditions
	Offset         *PointId             `protobuf:"bytes,3,opt,name=offset,proto3,oneof" json:"offset,omitempty"`                            // Start with this ID
	Limit          *uint32              `protobuf:"varint,4,opt,name=limit,proto3,oneof" json:"limit,omitempty"`                             // Max number of result
	WithVector     *bool                `protobuf:"varint,5,opt,name=with_vector,json=withVector,proto3,oneof" json:"with_vector,omitempty"` // Return point vector with the result.
	WithPayload    *WithPayloadSelector `protobuf:"bytes,6,opt,name=with_payload,json=withPayload,proto3" json:"with_payload,omitempty"`     // Options for specifying which payload to include or not
}

func (x *ScrollPoints) Reset() {
	*x = ScrollPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrollPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrollPoints) ProtoMessage() {}

func (x *ScrollPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrollPoints.ProtoReflect.Descriptor instead.
func (*ScrollPoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{14}
}

func (x *ScrollPoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *ScrollPoints) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ScrollPoints) GetOffset() *PointId {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *ScrollPoints) GetLimit() uint32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ScrollPoints) GetWithVector() bool {
	if x != nil && x.WithVector != nil {
		return *x.WithVector
	}
	return false
}

func (x *ScrollPoints) GetWithPayload() *WithPayloadSelector {
	if x != nil {
		return x.WithPayload
	}
	return nil
}

type RecommendPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string               `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`         // name of the collection
	Positive       []*PointId           `protobuf:"bytes,2,rep,name=positive,proto3" json:"positive,omitempty"`                                           // Look for vectors closest to those
	Negative       []*PointId           `protobuf:"bytes,3,rep,name=negative,proto3" json:"negative,omitempty"`                                           // Try to avoid vectors like this
	Filter         *Filter              `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`                                               // Filter conditions - return only those points that satisfy the specified conditions
	Top            uint64               `protobuf:"varint,5,opt,name=top,proto3" json:"top,omitempty"`                                                    // Max number of result
	WithVector     *bool                `protobuf:"varint,6,opt,name=with_vector,json=withVector,proto3,oneof" json:"with_vector,omitempty"`              // Return point vector with the result.
	WithPayload    *WithPayloadSelector `protobuf:"bytes,7,opt,name=with_payload,json=withPayload,proto3" json:"with_payload,omitempty"`                  // Options for specifying which payload to include or not
	Params         *SearchParams        `protobuf:"bytes,8,opt,name=params,proto3" json:"params,omitempty"`                                               // Search config
	ScoreThreshold *float32             `protobuf:"fixed32,9,opt,name=score_threshold,json=scoreThreshold,proto3,oneof" json:"score_threshold,omitempty"` // If provided - cut off results with worse scores
}

func (x *RecommendPoints) Reset() {
	*x = RecommendPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendPoints) ProtoMessage() {}

func (x *RecommendPoints) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendPoints.ProtoReflect.Descriptor instead.
func (*RecommendPoints) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{15}
}

func (x *RecommendPoints) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *RecommendPoints) GetPositive() []*PointId {
	if x != nil {
		return x.Positive
	}
	return nil
}

func (x *RecommendPoints) GetNegative() []*PointId {
	if x != nil {
		return x.Negative
	}
	return nil
}

func (x *RecommendPoints) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *RecommendPoints) GetTop() uint64 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *RecommendPoints) GetWithVector() bool {
	if x != nil && x.WithVector != nil {
		return *x.WithVector
	}
	return false
}

func (x *RecommendPoints) GetWithPayload() *WithPayloadSelector {
	if x != nil {
		return x.WithPayload
	}
	return nil
}

func (x *RecommendPoints) GetParams() *SearchParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *RecommendPoints) GetScoreThreshold() float32 {
	if x != nil && x.ScoreThreshold != nil {
		return *x.ScoreThreshold
	}
	return 0
}

type PointsOperationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *UpdateResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Time   float64       `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
}

func (x *PointsOperationResponse) Reset() {
	*x = PointsOperationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsOperationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsOperationResponse) ProtoMessage() {}

func (x *PointsOperationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsOperationResponse.ProtoReflect.Descriptor instead.
func (*PointsOperationResponse) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{16}
}

func (x *PointsOperationResponse) GetResult() *UpdateResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *PointsOperationResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type UpdateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationId uint64       `protobuf:"varint,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"` // Number of operation
	Status      UpdateStatus `protobuf:"varint,2,opt,name=status,proto3,enum=qdrant.UpdateStatus" json:"status,omitempty"`     // Operation status
}

func (x *UpdateResult) Reset() {
	*x = UpdateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResult) ProtoMessage() {}

func (x *UpdateResult) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResult.ProtoReflect.Descriptor instead.
func (*UpdateResult) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateResult) GetOperationId() uint64 {
	if x != nil {
		return x.OperationId
	}
	return 0
}

func (x *UpdateResult) GetStatus() UpdateStatus {
	if x != nil {
		return x.Status
	}
	return UpdateStatus_UnknownUpdateStatus
}

type ScoredPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *PointId          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                   // Point id
	Payload map[string]*Value `protobuf:"bytes,2,rep,name=payload,proto3" json:"payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Payload
	Score   float32           `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`                                                                                           // Similarity score
	Vector  []float32         `protobuf:"fixed32,4,rep,packed,name=vector,proto3" json:"vector,omitempty"`                                                                                  // Vector
	Version uint64            `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`                                                                                        // Last update operation applied to this point
}

func (x *ScoredPoint) Reset() {
	*x = ScoredPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoredPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoredPoint) ProtoMessage() {}

func (x *ScoredPoint) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoredPoint.ProtoReflect.Descriptor instead.
func (*ScoredPoint) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{18}
}

func (x *ScoredPoint) GetId() *PointId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ScoredPoint) GetPayload() map[string]*Value {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ScoredPoint) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ScoredPoint) GetVector() []float32 {
	if x != nil {
		return x.Vector
	}
	return nil
}

func (x *ScoredPoint) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type SearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*ScoredPoint `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Time   float64        `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{19}
}

func (x *SearchResponse) GetResult() []*ScoredPoint {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SearchResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type ScrollResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextPageOffset *PointId          `protobuf:"bytes,1,opt,name=next_page_offset,json=nextPageOffset,proto3,oneof" json:"next_page_offset,omitempty"` // Use this offset for the next query
	Result         []*RetrievedPoint `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty"`
	Time           float64           `protobuf:"fixed64,3,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
}

func (x *ScrollResponse) Reset() {
	*x = ScrollResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrollResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrollResponse) ProtoMessage() {}

func (x *ScrollResponse) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrollResponse.ProtoReflect.Descriptor instead.
func (*ScrollResponse) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{20}
}

func (x *ScrollResponse) GetNextPageOffset() *PointId {
	if x != nil {
		return x.NextPageOffset
	}
	return nil
}

func (x *ScrollResponse) GetResult() []*RetrievedPoint {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ScrollResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type RetrievedPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *PointId          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Payload map[string]*Value `protobuf:"bytes,2,rep,name=payload,proto3" json:"payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Vector  []float32         `protobuf:"fixed32,3,rep,packed,name=vector,proto3" json:"vector,omitempty"`
}

func (x *RetrievedPoint) Reset() {
	*x = RetrievedPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrievedPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrievedPoint) ProtoMessage() {}

func (x *RetrievedPoint) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrievedPoint.ProtoReflect.Descriptor instead.
func (*RetrievedPoint) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{21}
}

func (x *RetrievedPoint) GetId() *PointId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RetrievedPoint) GetPayload() map[string]*Value {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *RetrievedPoint) GetVector() []float32 {
	if x != nil {
		return x.Vector
	}
	return nil
}

type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*RetrievedPoint `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Time   float64           `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{22}
}

func (x *GetResponse) GetResult() []*RetrievedPoint {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *GetResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type RecommendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*ScoredPoint `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Time   float64        `protobuf:"fixed64,2,opt,name=time,proto3" json:"time,omitempty"` // Time spent to process
}

func (x *RecommendResponse) Reset() {
	*x = RecommendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendResponse) ProtoMessage() {}

func (x *RecommendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendResponse.ProtoReflect.Descriptor instead.
func (*RecommendResponse) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{23}
}

func (x *RecommendResponse) GetResult() []*ScoredPoint {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RecommendResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Should  []*Condition `protobuf:"bytes,1,rep,name=should,proto3" json:"should,omitempty"`                  // At least one of those conditions should match
	Must    []*Condition `protobuf:"bytes,2,rep,name=must,proto3" json:"must,omitempty"`                      // All conditions must match
	MustNot []*Condition `protobuf:"bytes,3,rep,name=must_not,json=mustNot,proto3" json:"must_not,omitempty"` // All conditions must NOT match
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{24}
}

func (x *Filter) GetShould() []*Condition {
	if x != nil {
		return x.Should
	}
	return nil
}

func (x *Filter) GetMust() []*Condition {
	if x != nil {
		return x.Must
	}
	return nil
}

func (x *Filter) GetMustNot() []*Condition {
	if x != nil {
		return x.MustNot
	}
	return nil
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ConditionOneOf:
	//	*Condition_Field
	//	*Condition_IsEmpty
	//	*Condition_HasId
	//	*Condition_Filter
	ConditionOneOf isCondition_ConditionOneOf `protobuf_oneof:"condition_one_of"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{25}
}

func (m *Condition) GetConditionOneOf() isCondition_ConditionOneOf {
	if m != nil {
		return m.ConditionOneOf
	}
	return nil
}

func (x *Condition) GetField() *FieldCondition {
	if x, ok := x.GetConditionOneOf().(*Condition_Field); ok {
		return x.Field
	}
	return nil
}

func (x *Condition) GetIsEmpty() *IsEmptyCondition {
	if x, ok := x.GetConditionOneOf().(*Condition_IsEmpty); ok {
		return x.IsEmpty
	}
	return nil
}

func (x *Condition) GetHasId() *HasIdCondition {
	if x, ok := x.GetConditionOneOf().(*Condition_HasId); ok {
		return x.HasId
	}
	return nil
}

func (x *Condition) GetFilter() *Filter {
	if x, ok := x.GetConditionOneOf().(*Condition_Filter); ok {
		return x.Filter
	}
	return nil
}

type isCondition_ConditionOneOf interface {
	isCondition_ConditionOneOf()
}

type Condition_Field struct {
	Field *FieldCondition `protobuf:"bytes,1,opt,name=field,proto3,oneof"`
}

type Condition_IsEmpty struct {
	IsEmpty *IsEmptyCondition `protobuf:"bytes,2,opt,name=isEmpty,proto3,oneof"`
}

type Condition_HasId struct {
	HasId *HasIdCondition `protobuf:"bytes,3,opt,name=hasId,proto3,oneof"`
}

type Condition_Filter struct {
	Filter *Filter `protobuf:"bytes,4,opt,name=filter,proto3,oneof"`
}

func (*Condition_Field) isCondition_ConditionOneOf() {}

func (*Condition_IsEmpty) isCondition_ConditionOneOf() {}

func (*Condition_HasId) isCondition_ConditionOneOf() {}

func (*Condition_Filter) isCondition_ConditionOneOf() {}

type IsEmptyCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *IsEmptyCondition) Reset() {
	*x = IsEmptyCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsEmptyCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsEmptyCondition) ProtoMessage() {}

func (x *IsEmptyCondition) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsEmptyCondition.ProtoReflect.Descriptor instead.
func (*IsEmptyCondition) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{26}
}

func (x *IsEmptyCondition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type HasIdCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasId []*PointId `protobuf:"bytes,1,rep,name=has_id,json=hasId,proto3" json:"has_id,omitempty"`
}

func (x *HasIdCondition) Reset() {
	*x = HasIdCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasIdCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasIdCondition) ProtoMessage() {}

func (x *HasIdCondition) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasIdCondition.ProtoReflect.Descriptor instead.
func (*HasIdCondition) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{27}
}

func (x *HasIdCondition) GetHasId() []*PointId {
	if x != nil {
		return x.HasId
	}
	return nil
}

type FieldCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key            string          `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Match          *Match          `protobuf:"bytes,2,opt,name=match,proto3" json:"match,omitempty"`                                           // Check if point has field with a given value
	Range          *Range          `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"`                                           // Check if points value lies in a given range
	GeoBoundingBox *GeoBoundingBox `protobuf:"bytes,4,opt,name=geo_bounding_box,json=geoBoundingBox,proto3" json:"geo_bounding_box,omitempty"` // Check if points geo location lies in a given area
	GeoRadius      *GeoRadius      `protobuf:"bytes,5,opt,name=geo_radius,json=geoRadius,proto3" json:"geo_radius,omitempty"`                  // Check if geo point is within a given radius
	ValuesCount    *ValuesCount    `protobuf:"bytes,6,opt,name=values_count,json=valuesCount,proto3" json:"values_count,omitempty"`            // Check number of values for a specific field
}

func (x *FieldCondition) Reset() {
	*x = FieldCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldCondition) ProtoMessage() {}

func (x *FieldCondition) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldCondition.ProtoReflect.Descriptor instead.
func (*FieldCondition) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{28}
}

func (x *FieldCondition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FieldCondition) GetMatch() *Match {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *FieldCondition) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *FieldCondition) GetGeoBoundingBox() *GeoBoundingBox {
	if x != nil {
		return x.GeoBoundingBox
	}
	return nil
}

func (x *FieldCondition) GetGeoRadius() *GeoRadius {
	if x != nil {
		return x.GeoRadius
	}
	return nil
}

func (x *FieldCondition) GetValuesCount() *ValuesCount {
	if x != nil {
		return x.ValuesCount
	}
	return nil
}

type Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MatchValue:
	//	*Match_Keyword
	//	*Match_Integer
	//	*Match_Boolean
	MatchValue isMatch_MatchValue `protobuf_oneof:"match_value"`
}

func (x *Match) Reset() {
	*x = Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{29}
}

func (m *Match) GetMatchValue() isMatch_MatchValue {
	if m != nil {
		return m.MatchValue
	}
	return nil
}

func (x *Match) GetKeyword() string {
	if x, ok := x.GetMatchValue().(*Match_Keyword); ok {
		return x.Keyword
	}
	return ""
}

func (x *Match) GetInteger() int64 {
	if x, ok := x.GetMatchValue().(*Match_Integer); ok {
		return x.Integer
	}
	return 0
}

func (x *Match) GetBoolean() bool {
	if x, ok := x.GetMatchValue().(*Match_Boolean); ok {
		return x.Boolean
	}
	return false
}

type isMatch_MatchValue interface {
	isMatch_MatchValue()
}

type Match_Keyword struct {
	Keyword string `protobuf:"bytes,1,opt,name=keyword,proto3,oneof"` // Match string keyword
}

type Match_Integer struct {
	Integer int64 `protobuf:"varint,2,opt,name=integer,proto3,oneof"` // Match integer
}

type Match_Boolean struct {
	Boolean bool `protobuf:"varint,3,opt,name=boolean,proto3,oneof"` // Match boolean
}

func (*Match_Keyword) isMatch_MatchValue() {}

func (*Match_Integer) isMatch_MatchValue() {}

func (*Match_Boolean) isMatch_MatchValue() {}

type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lt  *float64 `protobuf:"fixed64,1,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	Gt  *float64 `protobuf:"fixed64,2,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	Gte *float64 `protobuf:"fixed64,3,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	Lte *float64 `protobuf:"fixed64,4,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{30}
}

func (x *Range) GetLt() float64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *Range) GetGt() float64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *Range) GetGte() float64 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *Range) GetLte() float64 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

type GeoBoundingBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopLeft     *GeoPoint `protobuf:"bytes,1,opt,name=top_left,json=topLeft,proto3" json:"top_left,omitempty"`             // north-west corner
	BottomRight *GeoPoint `protobuf:"bytes,2,opt,name=bottom_right,json=bottomRight,proto3" json:"bottom_right,omitempty"` // south-east corner
}

func (x *GeoBoundingBox) Reset() {
	*x = GeoBoundingBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoBoundingBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoBoundingBox) ProtoMessage() {}

func (x *GeoBoundingBox) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoBoundingBox.ProtoReflect.Descriptor instead.
func (*GeoBoundingBox) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{31}
}

func (x *GeoBoundingBox) GetTopLeft() *GeoPoint {
	if x != nil {
		return x.TopLeft
	}
	return nil
}

func (x *GeoBoundingBox) GetBottomRight() *GeoPoint {
	if x != nil {
		return x.BottomRight
	}
	return nil
}

type GeoRadius struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Center *GeoPoint `protobuf:"bytes,1,opt,name=center,proto3" json:"center,omitempty"`   // Center of the circle
	Radius float32   `protobuf:"fixed32,2,opt,name=radius,proto3" json:"radius,omitempty"` // In meters
}

func (x *GeoRadius) Reset() {
	*x = GeoRadius{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoRadius) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoRadius) ProtoMessage() {}

func (x *GeoRadius) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoRadius.ProtoReflect.Descriptor instead.
func (*GeoRadius) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{32}
}

func (x *GeoRadius) GetCenter() *GeoPoint {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *GeoRadius) GetRadius() float32 {
	if x != nil {
		return x.Radius
	}
	return 0
}

type ValuesCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lt  *uint64 `protobuf:"varint,1,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	Gt  *uint64 `protobuf:"varint,2,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	Gte *uint64 `protobuf:"varint,3,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	Lte *uint64 `protobuf:"varint,4,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
}

func (x *ValuesCount) Reset() {
	*x = ValuesCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValuesCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValuesCount) ProtoMessage() {}

func (x *ValuesCount) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValuesCount.ProtoReflect.Descriptor instead.
func (*ValuesCount) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{33}
}

func (x *ValuesCount) GetLt() uint64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *ValuesCount) GetGt() uint64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *ValuesCount) GetGte() uint64 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *ValuesCount) GetLte() uint64 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

type PointsSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PointsSelectorOneOf:
	//	*PointsSelector_Points
	//	*PointsSelector_Filter
	PointsSelectorOneOf isPointsSelector_PointsSelectorOneOf `protobuf_oneof:"points_selector_one_of"`
}

func (x *PointsSelector) Reset() {
	*x = PointsSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsSelector) ProtoMessage() {}

func (x *PointsSelector) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsSelector.ProtoReflect.Descriptor instead.
func (*PointsSelector) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{34}
}

func (m *PointsSelector) GetPointsSelectorOneOf() isPointsSelector_PointsSelectorOneOf {
	if m != nil {
		return m.PointsSelectorOneOf
	}
	return nil
}

func (x *PointsSelector) GetPoints() *PointsIdsList {
	if x, ok := x.GetPointsSelectorOneOf().(*PointsSelector_Points); ok {
		return x.Points
	}
	return nil
}

func (x *PointsSelector) GetFilter() *Filter {
	if x, ok := x.GetPointsSelectorOneOf().(*PointsSelector_Filter); ok {
		return x.Filter
	}
	return nil
}

type isPointsSelector_PointsSelectorOneOf interface {
	isPointsSelector_PointsSelectorOneOf()
}

type PointsSelector_Points struct {
	Points *PointsIdsList `protobuf:"bytes,1,opt,name=points,proto3,oneof"`
}

type PointsSelector_Filter struct {
	Filter *Filter `protobuf:"bytes,2,opt,name=filter,proto3,oneof"`
}

func (*PointsSelector_Points) isPointsSelector_PointsSelectorOneOf() {}

func (*PointsSelector_Filter) isPointsSelector_PointsSelectorOneOf() {}

type PointsIdsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []*PointId `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *PointsIdsList) Reset() {
	*x = PointsIdsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsIdsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsIdsList) ProtoMessage() {}

func (x *PointsIdsList) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsIdsList.ProtoReflect.Descriptor instead.
func (*PointsIdsList) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{35}
}

func (x *PointsIdsList) GetIds() []*PointId {
	if x != nil {
		return x.Ids
	}
	return nil
}

type PointStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *PointId          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Vector  []float32         `protobuf:"fixed32,2,rep,packed,name=vector,proto3" json:"vector,omitempty"`
	Payload map[string]*Value `protobuf:"bytes,3,rep,name=payload,proto3" json:"payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PointStruct) Reset() {
	*x = PointStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointStruct) ProtoMessage() {}

func (x *PointStruct) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointStruct.ProtoReflect.Descriptor instead.
func (*PointStruct) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{36}
}

func (x *PointStruct) GetId() *PointId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PointStruct) GetVector() []float32 {
	if x != nil {
		return x.Vector
	}
	return nil
}

func (x *PointStruct) GetPayload() map[string]*Value {
	if x != nil {
		return x.Payload
	}
	return nil
}

type GeoPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lon float64 `protobuf:"fixed64,1,opt,name=lon,proto3" json:"lon,omitempty"`
	Lat float64 `protobuf:"fixed64,2,opt,name=lat,proto3" json:"lat,omitempty"`
}

func (x *GeoPoint) Reset() {
	*x = GeoPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoPoint) ProtoMessage() {}

func (x *GeoPoint) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoPoint.ProtoReflect.Descriptor instead.
func (*GeoPoint) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{37}
}

func (x *GeoPoint) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *GeoPoint) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

var File_points_proto protoreflect.FileDescriptor

var file_points_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x1a, 0x13, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x47, 0x0a, 0x07, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x42, 0x12, 0x0a, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04,
	0x77, 0x61, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x22, 0x89, 0x01,
	0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0c, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x77, 0x69,
	0x74, 0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x92, 0x02, 0x0a, 0x10, 0x53, 0x65,
	0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x3f, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x49, 0x0a, 0x0c, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x22, 0x9d,
	0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x04, 0x77, 0x61, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x27, 0x0a, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x22, 0x8f,
	0x01, 0x0a, 0x12, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04,
	0x77, 0x61, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x77, 0x61, 0x69, 0x74,
	0x22, 0xcc, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x77, 0x61, 0x69, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x86, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x22, 0x30, 0x0a, 0x16, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x30, 0x0a, 0x16, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xbb, 0x01, 0x0a,
	0x13, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x07, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x38, 0x0a, 0x0c, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x68, 0x6e,
	0x73, 0x77, 0x5f, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x68,
	0x6e, 0x73, 0x77, 0x45, 0x66, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x68, 0x6e, 0x73,
	0x77, 0x5f, 0x65, 0x66, 0x22, 0xef, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x6f, 0x70,
	0x12, 0x24, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52,
	0x0e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xb3, 0x02, 0x0a, 0x0c, 0x53, 0x63, 0x72, 0x6f, 0x6c,
	0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xb4, 0x03, 0x0a,
	0x0f, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e,
	0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x24, 0x0a,
	0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x0e, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x22, 0x5b, 0x0a, 0x17, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x5f, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xfd, 0x01, 0x0a, 0x0b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3a, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x49, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x51, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x0e, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x22, 0xd3, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x02, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x49, 0x0a, 0x0c, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x71,
	0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x51, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x11, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x88, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x64, 0x72,
	0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x6d, 0x75, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6d, 0x75, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08,
	0x6d, 0x75, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x6d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x22, 0xdf, 0x01, 0x0a, 0x09, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x69, 0x73, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x64, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x49, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x69, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2e,
	0x0a, 0x05, 0x68, 0x61, 0x73, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x73, 0x49, 0x64, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x68, 0x61, 0x73, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x22, 0x24, 0x0a, 0x10,
	0x49, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x22, 0x38, 0x0a, 0x0e, 0x48, 0x61, 0x73, 0x49, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x05, 0x68, 0x61, 0x73, 0x49, 0x64, 0x22, 0x98, 0x02, 0x0a,
	0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x23, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x67,
	0x65, 0x6f, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x47,
	0x65, 0x6f, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x52, 0x0e, 0x67,
	0x65, 0x6f, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x12, 0x30, 0x0a,
	0x0a, 0x67, 0x65, 0x6f, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6f, 0x52, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x52, 0x09, 0x67, 0x65, 0x6f, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12,
	0x36, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6a, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x1a, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x07,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x7d, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x13, 0x0a, 0x02,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52,
	0x02, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x03, 0x67, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x6c, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x03, 0x6c, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x67, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c,
	0x74, 0x65, 0x22, 0x72, 0x0a, 0x0e, 0x47, 0x65, 0x6f, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x42, 0x6f, 0x78, 0x12, 0x2b, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x66, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e,
	0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x4c, 0x65, 0x66,
	0x74, 0x12, 0x33, 0x0a, 0x0c, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x62, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x52, 0x69, 0x67, 0x68, 0x74, 0x22, 0x4d, 0x0a, 0x09, 0x47, 0x65, 0x6f, 0x52, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6f,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x02, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x03,
	0x67, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x67, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x74, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x0e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f,
	0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x64,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x28, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x18, 0x0a, 0x16, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x6e, 0x65,
	0x5f, 0x6f, 0x66, 0x22, 0x32, 0x0a, 0x0d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x64, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x3a, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x49, 0x0a, 0x0c,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x71, 0x64, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2e, 0x0a, 0x08, 0x47, 0x65, 0x6f, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x2a, 0x5d, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x47, 0x65, 0x6f, 0x10, 0x03, 0x2a, 0x48, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x02,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_points_proto_rawDescOnce sync.Once
	file_points_proto_rawDescData = file_points_proto_rawDesc
)

func file_points_proto_rawDescGZIP() []byte {
	file_points_proto_rawDescOnce.Do(func() {
		file_points_proto_rawDescData = protoimpl.X.CompressGZIP(file_points_proto_rawDescData)
	})
	return file_points_proto_rawDescData
}

var file_points_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_points_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_points_proto_goTypes = []interface{}{
	(FieldType)(0),                     // 0: qdrant.FieldType
	(UpdateStatus)(0),                  // 1: qdrant.UpdateStatus
	(*PointId)(nil),                    // 2: qdrant.PointId
	(*UpsertPoints)(nil),               // 3: qdrant.UpsertPoints
	(*DeletePoints)(nil),               // 4: qdrant.DeletePoints
	(*GetPoints)(nil),                  // 5: qdrant.GetPoints
	(*SetPayloadPoints)(nil),           // 6: qdrant.SetPayloadPoints
	(*DeletePayloadPoints)(nil),        // 7: qdrant.DeletePayloadPoints
	(*ClearPayloadPoints)(nil),         // 8: qdrant.ClearPayloadPoints
	(*CreateFieldIndexCollection)(nil), // 9: qdrant.CreateFieldIndexCollection
	(*DeleteFieldIndexCollection)(nil), // 10: qdrant.DeleteFieldIndexCollection
	(*PayloadIncludeSelector)(nil),     // 11: qdrant.PayloadIncludeSelector
	(*PayloadExcludeSelector)(nil),     // 12: qdrant.PayloadExcludeSelector
	(*WithPayloadSelector)(nil),        // 13: qdrant.WithPayloadSelector
	(*SearchParams)(nil),               // 14: qdrant.SearchParams
	(*SearchPoints)(nil),               // 15: qdrant.SearchPoints
	(*ScrollPoints)(nil),               // 16: qdrant.ScrollPoints
	(*RecommendPoints)(nil),            // 17: qdrant.RecommendPoints
	(*PointsOperationResponse)(nil),    // 18: qdrant.PointsOperationResponse
	(*UpdateResult)(nil),               // 19: qdrant.UpdateResult
	(*ScoredPoint)(nil),                // 20: qdrant.ScoredPoint
	(*SearchResponse)(nil),             // 21: qdrant.SearchResponse
	(*ScrollResponse)(nil),             // 22: qdrant.ScrollResponse
	(*RetrievedPoint)(nil),             // 23: qdrant.RetrievedPoint
	(*GetResponse)(nil),                // 24: qdrant.GetResponse
	(*RecommendResponse)(nil),          // 25: qdrant.RecommendResponse
	(*Filter)(nil),                     // 26: qdrant.Filter
	(*Condition)(nil),                  // 27: qdrant.Condition
	(*IsEmptyCondition)(nil),           // 28: qdrant.IsEmptyCondition
	(*HasIdCondition)(nil),             // 29: qdrant.HasIdCondition
	(*FieldCondition)(nil),             // 30: qdrant.FieldCondition
	(*Match)(nil),                      // 31: qdrant.Match
	(*Range)(nil),                      // 32: qdrant.Range
	(*GeoBoundingBox)(nil),             // 33: qdrant.GeoBoundingBox
	(*GeoRadius)(nil),                  // 34: qdrant.GeoRadius
	(*ValuesCount)(nil),                // 35: qdrant.ValuesCount
	(*PointsSelector)(nil),             // 36: qdrant.PointsSelector
	(*PointsIdsList)(nil),              // 37: qdrant.PointsIdsList
	(*PointStruct)(nil),                // 38: qdrant.PointStruct
	(*GeoPoint)(nil),                   // 39: qdrant.GeoPoint
	nil,                                // 40: qdrant.SetPayloadPoints.PayloadEntry
	nil,                                // 41: qdrant.ScoredPoint.PayloadEntry
	nil,                                // 42: qdrant.RetrievedPoint.PayloadEntry
	nil,                                // 43: qdrant.PointStruct.PayloadEntry
	(*Value)(nil),                      // 44: qdrant.Value
}
var file_points_proto_depIdxs = []int32{
	38, // 0: qdrant.UpsertPoints.points:type_name -> qdrant.PointStruct
	36, // 1: qdrant.DeletePoints.points:type_name -> qdrant.PointsSelector
	2,  // 2: qdrant.GetPoints.ids:type_name -> qdrant.PointId
	13, // 3: qdrant.GetPoints.with_payload:type_name -> qdrant.WithPayloadSelector
	40, // 4: qdrant.SetPayloadPoints.payload:type_name -> qdrant.SetPayloadPoints.PayloadEntry
	2,  // 5: qdrant.SetPayloadPoints.points:type_name -> qdrant.PointId
	2,  // 6: qdrant.DeletePayloadPoints.points:type_name -> qdrant.PointId
	36, // 7: qdrant.ClearPayloadPoints.points:type_name -> qdrant.PointsSelector
	0,  // 8: qdrant.CreateFieldIndexCollection.field_type:type_name -> qdrant.FieldType
	11, // 9: qdrant.WithPayloadSelector.include:type_name -> qdrant.PayloadIncludeSelector
	12, // 10: qdrant.WithPayloadSelector.exclude:type_name -> qdrant.PayloadExcludeSelector
	26, // 11: qdrant.SearchPoints.filter:type_name -> qdrant.Filter
	13, // 12: qdrant.SearchPoints.with_payload:type_name -> qdrant.WithPayloadSelector
	14, // 13: qdrant.SearchPoints.params:type_name -> qdrant.SearchParams
	26, // 14: qdrant.ScrollPoints.filter:type_name -> qdrant.Filter
	2,  // 15: qdrant.ScrollPoints.offset:type_name -> qdrant.PointId
	13, // 16: qdrant.ScrollPoints.with_payload:type_name -> qdrant.WithPayloadSelector
	2,  // 17: qdrant.RecommendPoints.positive:type_name -> qdrant.PointId
	2,  // 18: qdrant.RecommendPoints.negative:type_name -> qdrant.PointId
	26, // 19: qdrant.RecommendPoints.filter:type_name -> qdrant.Filter
	13, // 20: qdrant.RecommendPoints.with_payload:type_name -> qdrant.WithPayloadSelector
	14, // 21: qdrant.RecommendPoints.params:type_name -> qdrant.SearchParams
	19, // 22: qdrant.PointsOperationResponse.result:type_name -> qdrant.UpdateResult
	1,  // 23: qdrant.UpdateResult.status:type_name -> qdrant.UpdateStatus
	2,  // 24: qdrant.ScoredPoint.id:type_name -> qdrant.PointId
	41, // 25: qdrant.ScoredPoint.payload:type_name -> qdrant.ScoredPoint.PayloadEntry
	20, // 26: qdrant.SearchResponse.result:type_name -> qdrant.ScoredPoint
	2,  // 27: qdrant.ScrollResponse.next_page_offset:type_name -> qdrant.PointId
	23, // 28: qdrant.ScrollResponse.result:type_name -> qdrant.RetrievedPoint
	2,  // 29: qdrant.RetrievedPoint.id:type_name -> qdrant.PointId
	42, // 30: qdrant.RetrievedPoint.payload:type_name -> qdrant.RetrievedPoint.PayloadEntry
	23, // 31: qdrant.GetResponse.result:type_name -> qdrant.RetrievedPoint
	20, // 32: qdrant.RecommendResponse.result:type_name -> qdrant.ScoredPoint
	27, // 33: qdrant.Filter.should:type_name -> qdrant.Condition
	27, // 34: qdrant.Filter.must:type_name -> qdrant.Condition
	27, // 35: qdrant.Filter.must_not:type_name -> qdrant.Condition
	30, // 36: qdrant.Condition.field:type_name -> qdrant.FieldCondition
	28, // 37: qdrant.Condition.isEmpty:type_name -> qdrant.IsEmptyCondition
	29, // 38: qdrant.Condition.hasId:type_name -> qdrant.HasIdCondition
	26, // 39: qdrant.Condition.filter:type_name -> qdrant.Filter
	2,  // 40: qdrant.HasIdCondition.has_id:type_name -> qdrant.PointId
	31, // 41: qdrant.FieldCondition.match:type_name -> qdrant.Match
	32, // 42: qdrant.FieldCondition.range:type_name -> qdrant.Range
	33, // 43: qdrant.FieldCondition.geo_bounding_box:type_name -> qdrant.GeoBoundingBox
	34, // 44: qdrant.FieldCondition.geo_radius:type_name -> qdrant.GeoRadius
	35, // 45: qdrant.FieldCondition.values_count:type_name -> qdrant.ValuesCount
	39, // 46: qdrant.GeoBoundingBox.top_left:type_name -> qdrant.GeoPoint
	39, // 47: qdrant.GeoBoundingBox.bottom_right:type_name -> qdrant.GeoPoint
	39, // 48: qdrant.GeoRadius.center:type_name -> qdrant.GeoPoint
	37, // 49: qdrant.PointsSelector.points:type_name -> qdrant.PointsIdsList
	26, // 50: qdrant.PointsSelector.filter:type_name -> qdrant.Filter
	2,  // 51: qdrant.PointsIdsList.ids:type_name -> qdrant.PointId
	2,  // 52: qdrant.PointStruct.id:type_name -> qdrant.PointId
	43, // 53: qdrant.PointStruct.payload:type_name -> qdrant.PointStruct.PayloadEntry
	44, // 54: qdrant.SetPayloadPoints.PayloadEntry.value:type_name -> qdrant.Value
	44, // 55: qdrant.ScoredPoint.PayloadEntry.value:type_name -> qdrant.Value
	44, // 56: qdrant.RetrievedPoint.PayloadEntry.value:type_name -> qdrant.Value
	44, // 57: qdrant.PointStruct.PayloadEntry.value:type_name -> qdrant.Value
	58, // [58:58] is the sub-list for method output_type
	58, // [58:58] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_points_proto_init() }
func file_points_proto_init() {
	if File_points_proto != nil {
		return
	}
	file_json_with_int_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_points_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPayloadPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePayloadPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearPayloadPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFieldIndexCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFieldIndexCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayloadIncludeSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayloadExcludeSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithPayloadSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScrollPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointsOperationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoredPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScrollResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrievedPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsEmptyCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HasIdCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoBoundingBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoRadius); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValuesCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointsSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointsIdsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_points_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*PointId_Num)(nil),
		(*PointId_Uuid)(nil),
	}
	file_points_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_points_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_points_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_points_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_points_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_points_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_points_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_points_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_points_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*WithPayloadSelector_Enable)(nil),
		(*WithPayloadSelector_Include)(nil),
		(*WithPayloadSelector_Exclude)(nil),
	}
	file_points_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_points_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_points_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_points_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_points_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_points_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*Condition_Field)(nil),
		(*Condition_IsEmpty)(nil),
		(*Condition_HasId)(nil),
		(*Condition_Filter)(nil),
	}
	file_points_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*Match_Keyword)(nil),
		(*Match_Integer)(nil),
		(*Match_Boolean)(nil),
	}
	file_points_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_points_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_points_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*PointsSelector_Points)(nil),
		(*PointsSelector_Filter)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_points_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_points_proto_goTypes,
		DependencyIndexes: file_points_proto_depIdxs,
		EnumInfos:         file_points_proto_enumTypes,
		MessageInfos:      file_points_proto_msgTypes,
	}.Build()
	File_points_proto = out.File
	file_points_proto_rawDesc = nil
	file_points_proto_goTypes = nil
	file_points_proto_depIdxs = nil
}
